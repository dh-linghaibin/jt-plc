<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\zmdo_8.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\zmdo_8.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Tue Dec 12 18:08:10 2017
<BR><P>
<H3>Maximum Stack Usage =        128 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Tm1650Init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[16]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">NMI_Handler</a><BR>
 <LI><a href="#[17]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">HardFault_Handler</a><BR>
 <LI><a href="#[18]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">MemManage_Handler</a><BR>
 <LI><a href="#[19]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">BusFault_Handler</a><BR>
 <LI><a href="#[1a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">UsageFault_Handler</a><BR>
 <LI><a href="#[1b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">SVC_Handler</a><BR>
 <LI><a href="#[1c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">DebugMon_Handler</a><BR>
 <LI><a href="#[1d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">PendSV_Handler</a><BR>
 <LI><a href="#[31]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC0_1_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[19]">BusFault_Handler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[35]">CAN0_EWMC_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[34]">CAN0_RX1_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[2a]">DMA0_Channel0_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[2b]">DMA0_Channel1_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[2c]">DMA0_Channel2_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[2d]">DMA0_Channel3_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[2e]">DMA0_Channel4_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[2f]">DMA0_Channel5_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[30]">DMA0_Channel6_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[1c]">DebugMon_Handler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[4a]">EXMC_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[25]">EXTI0_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[47]">EXTI10_15_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[26]">EXTI1_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[27]">EXTI2_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[28]">EXTI3_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[29]">EXTI4_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[36]">EXTI5_9_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[23]">FMC_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[17]">HardFault_Handler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[3f]">I2C0_ER_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[3e]">I2C0_EV_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[41]">I2C1_ER_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[40]">I2C1_EV_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[20]">LVD_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[18]">MemManage_Handler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[6]">OutsignalEmergencyStop</a> from outsignal.o(i.OutsignalEmergencyStop) referenced 2 times from app.o(.data)
 <LI><a href="#[5]">OutsignalReadout</a> from outsignal.o(i.OutsignalReadout) referenced 2 times from app.o(.data)
 <LI><a href="#[4]">OutsignalSetout</a> from outsignal.o(i.OutsignalSetout) referenced 2 times from app.o(.data)
 <LI><a href="#[3]">OutsignedInit</a> from outsignal.o(i.OutsignedInit) referenced 2 times from app.o(.data)
 <LI><a href="#[1d]">PendSV_Handler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[24]">RCU_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[48]">RTC_Alarm_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[22]">RTC_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[42]">SPI0_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[43]">SPI1_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[1b]">SVC_Handler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[1e]">SysTick_Handler</a> from time.o(i.SysTick_Handler) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_gd32f10x.o(i.SystemInit) referenced from startup_gd32f10x_md.o(.text)
 <LI><a href="#[21]">TAMPER_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[37]">TIMER0_BRK_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[3a]">TIMER0_Channel_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[39]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[38]">TIMER0_UP_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[3b]">TIMER1_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[3c]">TIMER2_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[3d]">TIMER3_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[10]">TM1650ScanKey</a> from tm1650.o(i.TM1650ScanKey) referenced 2 times from app.o(.data)
 <LI><a href="#[d]">Tm1650Init</a> from tm1650.o(i.Tm1650Init) referenced 2 times from app.o(.data)
 <LI><a href="#[f]">Tm1650ShowLed</a> from tm1650.o(i.Tm1650ShowLed) referenced 2 times from app.o(.data)
 <LI><a href="#[e]">Tm1650ShowNex</a> from tm1650.o(i.Tm1650ShowNex) referenced 2 times from app.o(.data)
 <LI><a href="#[44]">USART0_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[45]">USART1_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[46]">USART2_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[32]">USBD_HP_CAN0_TX_IRQHandler</a> from can.o(i.USBD_HP_CAN0_TX_IRQHandler) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[33]">USBD_LP_CAN0_RX0_IRQHandler</a> from can.o(i.USBD_LP_CAN0_RX0_IRQHandler) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[49]">USBD_WKUP_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[1a]">UsageFault_Handler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[1f]">WWDGT_IRQHandler</a> from startup_gd32f10x_md.o(.text) referenced from startup_gd32f10x_md.o(RESET)
 <LI><a href="#[4d]">__main</a> from __main.o(!!!main) referenced from startup_gd32f10x_md.o(.text)
 <LI><a href="#[c]">bxcan_get_packget</a> from can.o(i.bxcan_get_packget) referenced 2 times from app.o(.data)
 <LI><a href="#[9]">bxcan_init</a> from can.o(i.bxcan_init) referenced 2 times from app.o(.data)
 <LI><a href="#[14]">bxcan_package_cmd</a> from can.o(i.bxcan_package_cmd) referenced 2 times from can.o(.data)
 <LI><a href="#[a]">bxcan_send</a> from can.o(i.bxcan_send) referenced 2 times from app.o(.data)
 <LI><a href="#[b]">bxcan_set_id</a> from can.o(i.bxcan_set_id) referenced 2 times from app.o(.data)
 <LI><a href="#[8]">flash_read</a> from flash.o(i.flash_read) referenced 2 times from app.o(.data)
 <LI><a href="#[7]">flash_write</a> from flash.o(i.flash_write) referenced 2 times from app.o(.data)
 <LI><a href="#[12]">time_get_1ms</a> from time.o(i.time_get_1ms) referenced 2 times from app.o(.data)
 <LI><a href="#[11]">time_init</a> from time.o(i.time_init) referenced 2 times from app.o(.data)
 <LI><a href="#[13]">time_set_1ms</a> from time.o(i.time_set_1ms) referenced 2 times from app.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[50]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[92]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[93]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[94]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[95]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[96]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[54]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[97]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[98]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[99]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[59]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ac]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ad]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[ae]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[af]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[b0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[b1]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[b3]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[51]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[53]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[b4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[55]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; menu_task
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[58]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[b6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_gd32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[57]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bd]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[be]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[bf]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>LedTask</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app.o(i.LedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedTask
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>OutsignalEmergencyStop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, outsignal.o(i.OutsignalEmergencyStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OutsignalEmergencyStop
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>OutsignalReadout</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, outsignal.o(i.OutsignalReadout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OutsignalReadout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_bit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>OutsignalSetout</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, outsignal.o(i.OutsignalSetout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OutsignalSetout
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>OutsignedInit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, outsignal.o(i.OutsignedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OutsignedInit &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsignalClock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_gd32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>TM1650ScanKey</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tm1650.o(i.TM1650ScanKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TM1650ScanKey &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Tm1650Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tm1650.o(i.Tm1650Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Tm1650Init &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_mode_addr_config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650DelayMs
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650Clock
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650Send
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650ShowNex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Tm1650ShowLed</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, tm1650.o(i.Tm1650ShowLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Tm1650ShowLed &rArr; TM1650Send &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Tm1650ShowNex</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tm1650.o(i.Tm1650ShowNex))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Tm1650ShowNex &rArr; TM1650Send &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650Send
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can.o(i.USBD_HP_CAN0_TX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, can.o(i.USBD_LP_CAN0_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LP_CAN0_RX0_IRQHandler &rArr; can_message_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>bxcan_get_packget</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(i.bxcan_get_packget))
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>bxcan_init</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, can.o(i.bxcan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bxcan_init &rArr; can_config &rArr; can_init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>bxcan_send</STRONG> (Thumb, 206 bytes, Stack size 112 bytes, can.o(i.bxcan_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = bxcan_send &rArr; can_transmit_states
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_states
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>bxcan_set_id</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, can.o(i.bxcan_set_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bxcan_set_id &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>can_deinit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gd32f10x_can.o(i.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[7c]"></a>can_filter_init</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, gd32f10x_can.o(i.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_set_id
</UL>

<P><STRONG><a name="[7e]"></a>can_init</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, gd32f10x_can.o(i.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_config
</UL>

<P><STRONG><a name="[79]"></a>can_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_can.o(i.can_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[74]"></a>can_message_receive</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, gd32f10x_can.o(i.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_CAN0_RX0_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>can_message_transmit</STRONG> (Thumb, 332 bytes, Stack size 12 bytes, gd32f10x_can.o(i.can_message_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_send
</UL>

<P><STRONG><a name="[8d]"></a>can_rx_task</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, app.o(i.can_rx_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_rx_task
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>can_transmit_states</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, gd32f10x_can.o(i.can_transmit_states))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_transmit_states
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_send
</UL>

<P><STRONG><a name="[8]"></a>flash_read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, flash.o(i.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_read
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>flash_write</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, flash.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = flash_write &rArr; fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>fmc_bank0_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f10x_fmc.o(i.fmc_bank0_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank0_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[87]"></a>fmc_bank0_state_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f10x_fmc.o(i.fmc_bank0_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>

<P><STRONG><a name="[88]"></a>fmc_bank1_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f10x_fmc.o(i.fmc_bank1_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[89]"></a>fmc_bank1_state_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gd32f10x_fmc.o(i.fmc_bank1_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
</UL>

<P><STRONG><a name="[85]"></a>fmc_lock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f10x_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[83]"></a>fmc_page_erase</STRONG> (Thumb, 222 bytes, Stack size 12 bytes, gd32f10x_fmc.o(i.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_page_erase &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[82]"></a>fmc_unlock</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gd32f10x_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[84]"></a>fmc_word_program</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, gd32f10x_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fmc_word_program &rArr; fmc_bank1_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank1_ready_wait
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_bank0_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[63]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsignalSetout
</UL>

<P><STRONG><a name="[64]"></a>gpio_init</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, gd32f10x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650Init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsignedInit
</UL>

<P><STRONG><a name="[61]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsignalEmergencyStop
</UL>

<P><STRONG><a name="[62]"></a>gpio_output_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_output_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsignalReadout
</UL>

<P><STRONG><a name="[6a]"></a>i2c_ack_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_i2c.o(i.i2c_ack_config))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650ScanKey
</UL>

<P><STRONG><a name="[70]"></a>i2c_clock_config</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, gd32f10x_i2c.o(i.i2c_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650Init
</UL>

<P><STRONG><a name="[6c]"></a>i2c_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_i2c.o(i.i2c_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650ScanKey
</UL>

<P><STRONG><a name="[6e]"></a>i2c_data_transmit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f10x_i2c.o(i.i2c_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650Send
</UL>

<P><STRONG><a name="[72]"></a>i2c_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_i2c.o(i.i2c_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650Init
</UL>

<P><STRONG><a name="[69]"></a>i2c_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_i2c.o(i.i2c_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650Send
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650ScanKey
</UL>

<P><STRONG><a name="[66]"></a>i2c_flag_get</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, gd32f10x_i2c.o(i.i2c_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650Send
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650ScanKey
</UL>

<P><STRONG><a name="[68]"></a>i2c_master_addressing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f10x_i2c.o(i.i2c_master_addressing))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650Send
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650ScanKey
</UL>

<P><STRONG><a name="[71]"></a>i2c_mode_addr_config</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, gd32f10x_i2c.o(i.i2c_mode_addr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_mode_addr_config
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650Init
</UL>

<P><STRONG><a name="[67]"></a>i2c_start_on_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_i2c.o(i.i2c_start_on_bus))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650Send
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650ScanKey
</UL>

<P><STRONG><a name="[6b]"></a>i2c_stop_on_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_i2c.o(i.i2c_stop_on_bus))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650Send
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1650ScanKey
</UL>

<P><STRONG><a name="[56]"></a>main</STRONG> (Thumb, 532 bytes, Stack size 8 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = main &rArr; menu_task
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm1650_task
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_task
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTask
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8c]"></a>menu_task</STRONG> (Thumb, 806 bytes, Stack size 24 bytes, app.o(i.menu_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = menu_task
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>nvic_irq_enable</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, gd32f10x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
</UL>

<P><STRONG><a name="[8a]"></a>rcu_clock_freq_get</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, gd32f10x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
</UL>

<P><STRONG><a name="[60]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650Clock
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsignalClock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_gpio_config
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650Init
</UL>

<P><STRONG><a name="[80]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[7f]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>

<P><STRONG><a name="[12]"></a>time_get_1ms</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time.o(i.time_get_1ms))
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>time_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, time.o(i.time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = time_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>time_set_1ms</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, time.o(i.time_set_1ms))
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>tm1650_task</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, app.o(i.tm1650_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tm1650_task
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14]"></a>bxcan_package_cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can.o(i.bxcan_package_cmd))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>can_config</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, can.o(i.can_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_config &rArr; can_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[75]"></a>can_gpio_config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, can.o(i.can_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[76]"></a>nvic_config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, can.o(i.nvic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nvic_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[5f]"></a>OutsignalClock</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, outsignal.o(i.OutsignalClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OutsignalClock
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsignedInit
</UL>

<P><STRONG><a name="[81]"></a>flash_read32</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(i.flash_read32))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>

<P><STRONG><a name="[6d]"></a>TM1650Send</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tm1650.o(i.TM1650Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TM1650Send &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650ShowNex
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650ShowLed
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650Init
</UL>

<P><STRONG><a name="[6f]"></a>Tm1650Clock</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, tm1650.o(i.Tm1650Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tm1650Clock
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650Init
</UL>

<P><STRONG><a name="[73]"></a>Tm1650DelayMs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tm1650.o(i.Tm1650DelayMs))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tm1650Init
</UL>

<P><STRONG><a name="[91]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, time.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_init
</UL>

<P><STRONG><a name="[90]"></a>system_clock_72m_hxtal</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, system_gd32f10x.o(i.system_clock_72m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[65]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f10x.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_72m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
