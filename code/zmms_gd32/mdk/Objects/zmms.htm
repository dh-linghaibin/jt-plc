<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\zmms.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\zmms.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Sun Dec 31 14:42:11 2017
<BR><P>
<H3>Maximum Stack Usage =      10424 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
searcher_Croot &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1fa]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[34]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">NMI_Handler</a><BR>
 <LI><a href="#[35]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">HardFault_Handler</a><BR>
 <LI><a href="#[36]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">MemManage_Handler</a><BR>
 <LI><a href="#[37]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">BusFault_Handler</a><BR>
 <LI><a href="#[38]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">UsageFault_Handler</a><BR>
 <LI><a href="#[3a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">DebugMon_Handler</a><BR>
 <LI><a href="#[4f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[2a8]">reallymarkobject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a8]">reallymarkobject</a><BR>
 <LI><a href="#[227]">luaD_throw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[227]">luaD_throw</a><BR>
 <LI><a href="#[374]">luaC_newobj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">luaM_realloc_</a><BR>
 <LI><a href="#[4fb]">luaO_tostring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[242]">luaS_newlstr</a><BR>
 <LI><a href="#[4c9]">luaO_pushvfstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40c]">luaG_runerror</a><BR>
 <LI><a href="#[459]">luaD_growstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40c]">luaG_runerror</a><BR>
 <LI><a href="#[4b1]">luaD_reallocstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[237]">luaM_toobig</a><BR>
 <LI><a href="#[4ca]">luaG_tointerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40c]">luaG_runerror</a><BR>
 <LI><a href="#[4cb]">varinfo</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[226]">luaO_pushfstring</a><BR>
 <LI><a href="#[451]">kname</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[436]">getobjname</a><BR>
 <LI><a href="#[436]">getobjname</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[436]">getobjname</a><BR>
 <LI><a href="#[4c4]">luaG_typeerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40c]">luaG_runerror</a><BR>
 <LI><a href="#[2be]">luaS_new</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[242]">luaS_newlstr</a><BR>
 <LI><a href="#[4af]">luaD_precall</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4af]">luaD_precall</a><BR>
 <LI><a href="#[42d]">luaH_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">luaM_realloc_</a><BR>
 <LI><a href="#[42b]">freeobj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">luaM_realloc_</a><BR>
 <LI><a href="#[42e]">luaE_freethread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32e]">luaF_close</a><BR>
 <LI><a href="#[330]">freestack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">luaM_realloc_</a><BR>
 <LI><a href="#[430]">luaE_freeCI</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">luaM_realloc_</a><BR>
 <LI><a href="#[42c]">luaF_freeproto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">luaM_realloc_</a><BR>
 <LI><a href="#[428]">freeLclosure</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">luaM_realloc_</a><BR>
 <LI><a href="#[429]">luaC_upvdeccount</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">luaM_realloc_</a><BR>
 <LI><a href="#[222]">GCTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[226]">luaO_pushfstring</a><BR>
 <LI><a href="#[225]">luaD_pcall</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32e]">luaF_close</a><BR>
 <LI><a href="#[4be]">luaE_shrinkCI</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">luaM_realloc_</a><BR>
 <LI><a href="#[304]">luaS_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[237]">luaM_toobig</a><BR>
 <LI><a href="#[4b7]">luaE_extendCI</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">luaM_realloc_</a><BR>
 <LI><a href="#[4b0]">luaV_execute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f9]">luaT_trybinTM</a><BR>
 <LI><a href="#[4d3]">luaH_newkey</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40c]">luaG_runerror</a><BR>
 <LI><a href="#[27c]">luaH_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d3]">luaH_newkey</a><BR>
 <LI><a href="#[27d]">luaV_equalobj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[503]">luaT_callTM</a><BR>
 <LI><a href="#[45d]">luaH_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34d]">luaH_setint</a><BR>
 <LI><a href="#[4d2]">setnodevector</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40c]">luaG_runerror</a><BR>
 <LI><a href="#[4d7]">setarrayvector</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[237]">luaM_toobig</a><BR>
 <LI><a href="#[4cc]">luaG_traceexec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[227]">luaD_throw</a><BR>
 <LI><a href="#[50a]">luaV_objlen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[503]">luaT_callTM</a><BR>
 <LI><a href="#[45f]">luaV_mod</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40c]">luaG_runerror</a><BR>
 <LI><a href="#[505]">luaT_callorderTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[504]">luaT_callbinTM</a><BR>
 <LI><a href="#[4c7]">luaG_ordererror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40c]">luaG_runerror</a><BR>
 <LI><a href="#[2c9]">luaV_finishset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[503]">luaT_callTM</a><BR>
 <LI><a href="#[2c0]">luaV_finishget</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[503]">luaT_callTM</a><BR>
 <LI><a href="#[460]">luaV_div</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40c]">luaG_runerror</a><BR>
 <LI><a href="#[4c0]">luaF_findupval</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">luaM_realloc_</a><BR>
 <LI><a href="#[4ae]">stackerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40c]">luaG_runerror</a><BR>
 <LI><a href="#[4fd]">luaV_concat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[242]">luaS_newlstr</a><BR>
 <LI><a href="#[4fa]">pushstr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[242]">luaS_newlstr</a><BR>
 <LI><a href="#[4c5]">luaG_errormsg</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[227]">luaD_throw</a><BR>
 <LI><a href="#[2e3]">resizebox</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e3]">resizebox</a><BR>
 <LI><a href="#[404]">findfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[404]">findfield</a><BR>
 <LI><a href="#[2ca]">auxsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ca]">auxsort</a><BR>
 <LI><a href="#[526]">start_capture</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c3]">match</a><BR>
 <LI><a href="#[52c]">min_expand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c3]">match</a><BR>
 <LI><a href="#[52b]">max_expand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c3]">match</a><BR>
 <LI><a href="#[3c3]">match</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c3]">match</a><BR>
 <LI><a href="#[3c2]">end_capture</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c3]">match</a><BR>
 <LI><a href="#[220]">DumpProtos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21e]">DumpFunction</a><BR>
 <LI><a href="#[240]">LoadProtos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23e]">LoadFunction</a><BR>
 <LI><a href="#[481]">txtToken</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30f]">save</a><BR>
 <LI><a href="#[3d1]">subexpr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d1]">subexpr</a><BR>
 <LI><a href="#[57f]">yindex</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34f]">expr</a><BR>
 <LI><a href="#[58e]">singlevaraux</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58e]">singlevaraux</a><BR>
 <LI><a href="#[542]">primaryexp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34f]">expr</a><BR>
 <LI><a href="#[2a1]">explist</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34f]">expr</a><BR>
 <LI><a href="#[3ff]">recfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34f]">expr</a><BR>
 <LI><a href="#[3fe]">listfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34f]">expr</a><BR>
 <LI><a href="#[2db]">body</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d9]">statlist</a><BR>
 <LI><a href="#[2d7]">block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d9]">statlist</a><BR>
 <LI><a href="#[583]">repeatstat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d9]">statlist</a><BR>
 <LI><a href="#[478]">skipnoopstat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[592]">statement</a><BR>
 <LI><a href="#[45b]">test_then_block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d9]">statlist</a><BR>
 <LI><a href="#[29a]">assignment</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29a]">assignment</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[75]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[76]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[77]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[78]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[65]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[66]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[70]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[79]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[3f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[73]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[74]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[68]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[69]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[71]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[72]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[62]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[63]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[67]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">USB_LP_CAN1_RX0_IRQHandler</a> from can.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[7b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[7e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[81]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[80]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[7c]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[7d]">_sputc</a> from _sputc.o(.text) referenced from sprintf.o(.text)
 <LI><a href="#[a5]">boxgc</a> from lauxlib.o(i.boxgc) referenced from lauxlib.o(i.newbox)
 <LI><a href="#[20]">bxcan_get_packget</a> from can.o(i.bxcan_get_packget) referenced 2 times from app.o(.data)
 <LI><a href="#[1d]">bxcan_init</a> from can.o(i.bxcan_init) referenced 2 times from app.o(.data)
 <LI><a href="#[1e]">bxcan_send</a> from can.o(i.bxcan_send) referenced 2 times from app.o(.data)
 <LI><a href="#[1f]">bxcan_set_id</a> from can.o(i.bxcan_set_id) referenced 2 times from app.o(.data)
 <LI><a href="#[ac]">byteoffset</a> from lutf8lib.o(i.byteoffset) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[a2]">can_task</a> from app.o(i.can_task) referenced from app.o(i.main)
 <LI><a href="#[a3]">can_up_task</a> from app.o(i.can_up_task) referenced from app.o(i.main)
 <LI><a href="#[ad]">codepoint</a> from lutf8lib.o(i.codepoint) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[10f]">db_debug</a> from ldblib.o(i.db_debug) referenced from ldblib.o(.constdata)
 <LI><a href="#[111]">db_gethook</a> from ldblib.o(i.db_gethook) referenced from ldblib.o(.constdata)
 <LI><a href="#[112]">db_getinfo</a> from ldblib.o(i.db_getinfo) referenced from ldblib.o(.constdata)
 <LI><a href="#[113]">db_getlocal</a> from ldblib.o(i.db_getlocal) referenced from ldblib.o(.constdata)
 <LI><a href="#[115]">db_getmetatable</a> from ldblib.o(i.db_getmetatable) referenced from ldblib.o(.constdata)
 <LI><a href="#[114]">db_getregistry</a> from ldblib.o(i.db_getregistry) referenced from ldblib.o(.constdata)
 <LI><a href="#[116]">db_getupvalue</a> from ldblib.o(i.db_getupvalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[110]">db_getuservalue</a> from ldblib.o(i.db_getuservalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[11a]">db_sethook</a> from ldblib.o(i.db_sethook) referenced from ldblib.o(.constdata)
 <LI><a href="#[11b]">db_setlocal</a> from ldblib.o(i.db_setlocal) referenced from ldblib.o(.constdata)
 <LI><a href="#[11c]">db_setmetatable</a> from ldblib.o(i.db_setmetatable) referenced from ldblib.o(.constdata)
 <LI><a href="#[11d]">db_setupvalue</a> from ldblib.o(i.db_setupvalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[119]">db_setuservalue</a> from ldblib.o(i.db_setuservalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[11e]">db_traceback</a> from ldblib.o(i.db_traceback) referenced from ldblib.o(.constdata)
 <LI><a href="#[118]">db_upvalueid</a> from ldblib.o(i.db_upvalueid) referenced from ldblib.o(.constdata)
 <LI><a href="#[117]">db_upvaluejoin</a> from ldblib.o(i.db_upvaluejoin) referenced from ldblib.o(.constdata)
 <LI><a href="#[92]">dofilecont</a> from lbaselib.o(i.dofilecont) referenced from lbaselib.o(i.luaB_dofile)
 <LI><a href="#[83]">dothecall</a> from lgc.o(i.dothecall) referenced from lgc.o(i.GCTM)
 <LI><a href="#[2f]">eMBFuncReadCoils</a> from mbfunccoils.o(i.eMBFuncReadCoils) referenced 2 times from mb.o(.data)
 <LI><a href="#[32]">eMBFuncReadDiscreteInputs</a> from mbfuncdisc.o(i.eMBFuncReadDiscreteInputs) referenced 2 times from mb.o(.data)
 <LI><a href="#[2b]">eMBFuncReadHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[2a]">eMBFuncReadInputRegister</a> from mbfuncinput.o(i.eMBFuncReadInputRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[2e]">eMBFuncReadWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[29]">eMBFuncReportSlaveID</a> from mbfuncother.o(i.eMBFuncReportSlaveID) referenced 2 times from mb.o(.data)
 <LI><a href="#[30]">eMBFuncWriteCoil</a> from mbfunccoils.o(i.eMBFuncWriteCoil) referenced 2 times from mb.o(.data)
 <LI><a href="#[2d]">eMBFuncWriteHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[31]">eMBFuncWriteMultipleCoils</a> from mbfunccoils.o(i.eMBFuncWriteMultipleCoils) referenced 2 times from mb.o(.data)
 <LI><a href="#[2c]">eMBFuncWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[8c]">eMBTCPReceive</a> from mbtcp.o(i.eMBTCPReceive) referenced from mb.o(i.eMBTCPInit)
 <LI><a href="#[8d]">eMBTCPSend</a> from mbtcp.o(i.eMBTCPSend) referenced from mb.o(i.eMBTCPInit)
 <LI><a href="#[8a]">eMBTCPStart</a> from mbtcp.o(i.eMBTCPStart) referenced from mb.o(i.eMBTCPInit)
 <LI><a href="#[8b]">eMBTCPStop</a> from mbtcp.o(i.eMBTCPStop) referenced from mb.o(i.eMBTCPInit)
 <LI><a href="#[10]">en28j60_init</a> from enc28j60.o(i.en28j60_init) referenced 2 times from app.o(.data)
 <LI><a href="#[11]">en28j60_packet_receive</a> from enc28j60.o(i.en28j60_packet_receive) referenced 2 times from app.o(.data)
 <LI><a href="#[12]">en28j60_packet_send</a> from enc28j60.o(i.en28j60_packet_send) referenced 2 times from app.o(.data)
 <LI><a href="#[13]">en28j60_set_mac</a> from enc28j60.o(i.en28j60_set_mac) referenced 2 times from app.o(.data)
 <LI><a href="#[9e]">f_call</a> from lapi.o(i.f_call) referenced from lapi.o(i.lua_pcallk)
 <LI><a href="#[fd]">f_flush</a> from liolib.o(i.f_flush) referenced from liolib.o(.constdata)
 <LI><a href="#[103]">f_gc</a> from liolib.o(i.f_gc) referenced from liolib.o(.constdata)
 <LI><a href="#[fe]">f_lines</a> from liolib.o(i.f_lines) referenced from liolib.o(.constdata)
 <LI><a href="#[9d]">f_luaopen</a> from lstate.o(i.f_luaopen) referenced from lstate.o(i.lua_newstate)
 <LI><a href="#[97]">f_parser</a> from ldo.o(i.f_parser) referenced from ldo.o(i.luaD_protectedparser)
 <LI><a href="#[ff]">f_read</a> from liolib.o(i.f_read) referenced from liolib.o(.constdata)
 <LI><a href="#[100]">f_seek</a> from liolib.o(i.f_seek) referenced from liolib.o(.constdata)
 <LI><a href="#[101]">f_setvbuf</a> from liolib.o(i.f_setvbuf) referenced from liolib.o(.constdata)
 <LI><a href="#[104]">f_tostring</a> from liolib.o(i.f_tostring) referenced from liolib.o(.constdata)
 <LI><a href="#[102]">f_write</a> from liolib.o(i.f_write) referenced from liolib.o(.constdata)
 <LI><a href="#[96]">finishpcall</a> from lbaselib.o(i.finishpcall) referenced from lbaselib.o(i.luaB_pcall)
 <LI><a href="#[96]">finishpcall</a> from lbaselib.o(i.finishpcall) referenced from lbaselib.o(i.luaB_xpcall)
 <LI><a href="#[7f]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[86]">gctm</a> from loadlib.o(i.gctm) referenced from loadlib.o(i.createclibstable)
 <LI><a href="#[94]">generic_reader</a> from lbaselib.o(i.generic_reader) referenced from lbaselib.o(i.luaB_load)
 <LI><a href="#[99]">getF</a> from lauxlib.o(i.getF) referenced from lauxlib.o(i.luaL_loadfilex)
 <LI><a href="#[98]">getS</a> from lauxlib.o(i.getS) referenced from lauxlib.o(i.luaL_loadbufferx)
 <LI><a href="#[bd]">gmatch</a> from lstrlib.o(i.gmatch) referenced from lstrlib.o(.constdata)
 <LI><a href="#[8e]">gmatch_aux</a> from lstrlib.o(i.gmatch_aux) referenced from lstrlib.o(i.gmatch)
 <LI><a href="#[9c]">growstack</a> from lapi.o(i.growstack) referenced from lapi.o(i.lua_checkstack)
 <LI><a href="#[88]">hookf</a> from ldblib.o(i.hookf) referenced from ldblib.o(i.db_gethook)
 <LI><a href="#[88]">hookf</a> from ldblib.o(i.hookf) referenced from ldblib.o(i.db_sethook)
 <LI><a href="#[f2]">io_close</a> from liolib.o(i.io_close) referenced 2 times from liolib.o(.constdata)
 <LI><a href="#[a6]">io_fclose</a> from liolib.o(i.io_fclose) referenced from liolib.o(i.newfile)
 <LI><a href="#[f3]">io_flush</a> from liolib.o(i.io_flush) referenced from liolib.o(.constdata)
 <LI><a href="#[f4]">io_input</a> from liolib.o(i.io_input) referenced from liolib.o(.constdata)
 <LI><a href="#[f5]">io_lines</a> from liolib.o(i.io_lines) referenced from liolib.o(.constdata)
 <LI><a href="#[87]">io_noclose</a> from liolib.o(i.io_noclose) referenced from liolib.o(i.createstdfile)
 <LI><a href="#[87]">io_noclose</a> from liolib.o(i.io_noclose) referenced from liolib.o(i.io_noclose)
 <LI><a href="#[f6]">io_open</a> from liolib.o(i.io_open) referenced from liolib.o(.constdata)
 <LI><a href="#[f7]">io_output</a> from liolib.o(i.io_output) referenced from liolib.o(.constdata)
 <LI><a href="#[8f]">io_pclose</a> from liolib.o(i.io_pclose) referenced from liolib.o(i.io_popen)
 <LI><a href="#[f8]">io_popen</a> from liolib.o(i.io_popen) referenced from liolib.o(.constdata)
 <LI><a href="#[f9]">io_read</a> from liolib.o(i.io_read) referenced from liolib.o(.constdata)
 <LI><a href="#[84]">io_readline</a> from liolib.o(i.io_readline) referenced from liolib.o(i.aux_lines)
 <LI><a href="#[fa]">io_tmpfile</a> from liolib.o(i.io_tmpfile) referenced from liolib.o(.constdata)
 <LI><a href="#[fb]">io_type</a> from liolib.o(i.io_type) referenced from liolib.o(.constdata)
 <LI><a href="#[fc]">io_write</a> from liolib.o(i.io_write) referenced from liolib.o(.constdata)
 <LI><a href="#[93]">ipairsaux</a> from lbaselib.o(i.ipairsaux) referenced from lbaselib.o(i.luaB_ipairs)
 <LI><a href="#[82]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[90]">iter_aux</a> from lutf8lib.o(i.iter_aux) referenced from lutf8lib.o(i.iter_codes)
 <LI><a href="#[b0]">iter_codes</a> from lutf8lib.o(i.iter_codes) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[9a]">l_alloc</a> from lauxlib.o(i.l_alloc) referenced from lauxlib.o(i.luaL_newstate)
 <LI><a href="#[1a]">led_init</a> from led.o(i.led_init) referenced 2 times from app.o(.data)
 <LI><a href="#[1b]">led_set</a> from led.o(i.led_set) referenced 2 times from app.o(.data)
 <LI><a href="#[1c]">led_tager</a> from led.o(i.led_tager) referenced 2 times from app.o(.data)
 <LI><a href="#[d4]">ll_loadlib</a> from loadlib.o(i.ll_loadlib) referenced from loadlib.o(.constdata)
 <LI><a href="#[d6]">ll_require</a> from loadlib.o(i.ll_require) referenced from loadlib.o(.constdata)
 <LI><a href="#[d5]">ll_searchpath</a> from loadlib.o(i.ll_searchpath) referenced from loadlib.o(.constdata)
 <LI><a href="#[126]">luaB_assert</a> from lbaselib.o(i.luaB_assert) referenced from lbaselib.o(.constdata)
 <LI><a href="#[91]">luaB_auxwrap</a> from lcorolib.o(i.luaB_auxwrap) referenced from lcorolib.o(i.luaB_cowrap)
 <LI><a href="#[11f]">luaB_cocreate</a> from lcorolib.o(i.luaB_cocreate) referenced from lcorolib.o(.constdata)
 <LI><a href="#[127]">luaB_collectgarbage</a> from lbaselib.o(i.luaB_collectgarbage) referenced from lbaselib.o(.constdata)
 <LI><a href="#[120]">luaB_coresume</a> from lcorolib.o(i.luaB_coresume) referenced from lcorolib.o(.constdata)
 <LI><a href="#[121]">luaB_corunning</a> from lcorolib.o(i.luaB_corunning) referenced from lcorolib.o(.constdata)
 <LI><a href="#[122]">luaB_costatus</a> from lcorolib.o(i.luaB_costatus) referenced from lcorolib.o(.constdata)
 <LI><a href="#[123]">luaB_cowrap</a> from lcorolib.o(i.luaB_cowrap) referenced from lcorolib.o(.constdata)
 <LI><a href="#[128]">luaB_dofile</a> from lbaselib.o(i.luaB_dofile) referenced from lbaselib.o(.constdata)
 <LI><a href="#[129]">luaB_error</a> from lbaselib.o(i.luaB_error) referenced from lbaselib.o(.constdata)
 <LI><a href="#[12a]">luaB_getmetatable</a> from lbaselib.o(i.luaB_getmetatable) referenced from lbaselib.o(.constdata)
 <LI><a href="#[12b]">luaB_ipairs</a> from lbaselib.o(i.luaB_ipairs) referenced from lbaselib.o(.constdata)
 <LI><a href="#[12d]">luaB_load</a> from lbaselib.o(i.luaB_load) referenced from lbaselib.o(.constdata)
 <LI><a href="#[12c]">luaB_loadfile</a> from lbaselib.o(i.luaB_loadfile) referenced from lbaselib.o(.constdata)
 <LI><a href="#[95]">luaB_next</a> from lbaselib.o(i.luaB_next) referenced from lbaselib.o(.constdata)
 <LI><a href="#[95]">luaB_next</a> from lbaselib.o(i.luaB_next) referenced from lbaselib.o(i.luaB_pairs)
 <LI><a href="#[12e]">luaB_pairs</a> from lbaselib.o(i.luaB_pairs) referenced from lbaselib.o(.constdata)
 <LI><a href="#[12f]">luaB_pcall</a> from lbaselib.o(i.luaB_pcall) referenced from lbaselib.o(.constdata)
 <LI><a href="#[130]">luaB_print</a> from lbaselib.o(i.luaB_print) referenced from lbaselib.o(.constdata)
 <LI><a href="#[131]">luaB_rawequal</a> from lbaselib.o(i.luaB_rawequal) referenced from lbaselib.o(.constdata)
 <LI><a href="#[133]">luaB_rawget</a> from lbaselib.o(i.luaB_rawget) referenced from lbaselib.o(.constdata)
 <LI><a href="#[132]">luaB_rawlen</a> from lbaselib.o(i.luaB_rawlen) referenced from lbaselib.o(.constdata)
 <LI><a href="#[134]">luaB_rawset</a> from lbaselib.o(i.luaB_rawset) referenced from lbaselib.o(.constdata)
 <LI><a href="#[135]">luaB_select</a> from lbaselib.o(i.luaB_select) referenced from lbaselib.o(.constdata)
 <LI><a href="#[136]">luaB_setmetatable</a> from lbaselib.o(i.luaB_setmetatable) referenced from lbaselib.o(.constdata)
 <LI><a href="#[137]">luaB_tonumber</a> from lbaselib.o(i.luaB_tonumber) referenced from lbaselib.o(.constdata)
 <LI><a href="#[138]">luaB_tostring</a> from lbaselib.o(i.luaB_tostring) referenced from lbaselib.o(.constdata)
 <LI><a href="#[139]">luaB_type</a> from lbaselib.o(i.luaB_type) referenced from lbaselib.o(.constdata)
 <LI><a href="#[13a]">luaB_xpcall</a> from lbaselib.o(i.luaB_xpcall) referenced from lbaselib.o(.constdata)
 <LI><a href="#[124]">luaB_yield</a> from lcorolib.o(i.luaB_yield) referenced from lcorolib.o(.constdata)
 <LI><a href="#[125]">luaB_yieldable</a> from lcorolib.o(i.luaB_yieldable) referenced from lcorolib.o(.constdata)
 <LI><a href="#[a4]">lua_newstate</a> from lstate.o(i.lua_newstate) referenced from lstate.o(i.makeseed)
 <LI><a href="#[105]">luaopen_base</a> from lbaselib.o(i.luaopen_base) referenced from linit.o(.constdata)
 <LI><a href="#[107]">luaopen_coroutine</a> from lcorolib.o(i.luaopen_coroutine) referenced from linit.o(.constdata)
 <LI><a href="#[10e]">luaopen_debug</a> from ldblib.o(i.luaopen_debug) referenced from linit.o(.constdata)
 <LI><a href="#[109]">luaopen_io</a> from liolib.o(i.luaopen_io) referenced from linit.o(.constdata)
 <LI><a href="#[10c]">luaopen_math</a> from lmathlib.o(i.luaopen_math) referenced from linit.o(.constdata)
 <LI><a href="#[10a]">luaopen_os</a> from loslib.o(i.luaopen_os) referenced from linit.o(.constdata)
 <LI><a href="#[106]">luaopen_package</a> from loadlib.o(i.luaopen_package) referenced from linit.o(.constdata)
 <LI><a href="#[10b]">luaopen_string</a> from lstrlib.o(i.luaopen_string) referenced from linit.o(.constdata)
 <LI><a href="#[108]">luaopen_table</a> from ltablib.o(i.luaopen_table) referenced from linit.o(.constdata)
 <LI><a href="#[10d]">luaopen_utf8</a> from lutf8lib.o(i.luaopen_utf8) referenced from linit.o(.constdata)
 <LI><a href="#[db]">math_abs</a> from lmathlib.o(i.math_abs) referenced from lmathlib.o(.constdata)
 <LI><a href="#[dc]">math_acos</a> from lmathlib.o(i.math_acos) referenced from lmathlib.o(.constdata)
 <LI><a href="#[dd]">math_asin</a> from lmathlib.o(i.math_asin) referenced from lmathlib.o(.constdata)
 <LI><a href="#[de]">math_atan</a> from lmathlib.o(i.math_atan) referenced from lmathlib.o(.constdata)
 <LI><a href="#[df]">math_ceil</a> from lmathlib.o(i.math_ceil) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e0]">math_cos</a> from lmathlib.o(i.math_cos) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e1]">math_deg</a> from lmathlib.o(i.math_deg) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e2]">math_exp</a> from lmathlib.o(i.math_exp) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e4]">math_floor</a> from lmathlib.o(i.math_floor) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e5]">math_fmod</a> from lmathlib.o(i.math_fmod) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e7]">math_log</a> from lmathlib.o(i.math_log) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e8]">math_max</a> from lmathlib.o(i.math_max) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e9]">math_min</a> from lmathlib.o(i.math_min) referenced from lmathlib.o(.constdata)
 <LI><a href="#[ea]">math_modf</a> from lmathlib.o(i.math_modf) referenced from lmathlib.o(.constdata)
 <LI><a href="#[eb]">math_rad</a> from lmathlib.o(i.math_rad) referenced from lmathlib.o(.constdata)
 <LI><a href="#[ec]">math_random</a> from lmathlib.o(i.math_random) referenced from lmathlib.o(.constdata)
 <LI><a href="#[ed]">math_randomseed</a> from lmathlib.o(i.math_randomseed) referenced from lmathlib.o(.constdata)
 <LI><a href="#[ee]">math_sin</a> from lmathlib.o(i.math_sin) referenced from lmathlib.o(.constdata)
 <LI><a href="#[ef]">math_sqrt</a> from lmathlib.o(i.math_sqrt) referenced from lmathlib.o(.constdata)
 <LI><a href="#[f0]">math_tan</a> from lmathlib.o(i.math_tan) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e3]">math_toint</a> from lmathlib.o(i.math_toint) referenced from lmathlib.o(.constdata)
 <LI><a href="#[f1]">math_type</a> from lmathlib.o(i.math_type) referenced from lmathlib.o(.constdata)
 <LI><a href="#[e6]">math_ult</a> from lmathlib.o(i.math_ult) referenced from lmathlib.o(.constdata)
 <LI><a href="#[16]">modbus_heart</a> from modbus.o(i.modbus_heart) referenced 2 times from app.o(.data)
 <LI><a href="#[14]">modbus_init</a> from modbus.o(i.modbus_init) referenced 2 times from app.o(.data)
 <LI><a href="#[15]">modbus_loop</a> from modbus.o(i.modbus_loop) referenced 2 times from app.o(.data)
 <LI><a href="#[17]">modbus_set_coil</a> from modbus.o(i.modbus_set_coil) referenced 2 times from app.o(.data)
 <LI><a href="#[18]">modbus_set_input</a> from modbus.o(i.modbus_set_input) referenced 2 times from app.o(.data)
 <LI><a href="#[a1]">modbus_task</a> from app.o(i.modbus_task) referenced from app.o(i.main)
 <LI><a href="#[19]">modbus_up_coil</a> from modbus.o(i.modbus_up_coil) referenced 2 times from app.o(.data)
 <LI><a href="#[89]">msghandler</a> from app.o(i.msghandler) referenced from app.o(i.docall)
 <LI><a href="#[f]">only_id_get_id</a> from only_id.o(i.only_id_get_id) referenced 2 times from app.o(.data)
 <LI><a href="#[c9]">os_clock</a> from loslib.o(i.os_clock) referenced from loslib.o(.constdata)
 <LI><a href="#[ca]">os_date</a> from loslib.o(i.os_date) referenced from loslib.o(.constdata)
 <LI><a href="#[cb]">os_difftime</a> from loslib.o(i.os_difftime) referenced from loslib.o(.constdata)
 <LI><a href="#[cc]">os_execute</a> from loslib.o(i.os_execute) referenced from loslib.o(.constdata)
 <LI><a href="#[cd]">os_exit</a> from loslib.o(i.os_exit) referenced from loslib.o(.constdata)
 <LI><a href="#[ce]">os_getenv</a> from loslib.o(i.os_getenv) referenced from loslib.o(.constdata)
 <LI><a href="#[cf]">os_remove</a> from loslib.o(i.os_remove) referenced from loslib.o(.constdata)
 <LI><a href="#[d0]">os_rename</a> from loslib.o(i.os_rename) referenced from loslib.o(.constdata)
 <LI><a href="#[d1]">os_setlocale</a> from loslib.o(i.os_setlocale) referenced from loslib.o(.constdata)
 <LI><a href="#[d2]">os_time</a> from loslib.o(i.os_time) referenced from loslib.o(.constdata)
 <LI><a href="#[d3]">os_tmpname</a> from loslib.o(i.os_tmpname) referenced from loslib.o(.constdata)
 <LI><a href="#[b3]">pack</a> from ltablib.o(i.pack) referenced from ltablib.o(.constdata)
 <LI><a href="#[9b]">panic</a> from lauxlib.o(i.panic) referenced from lauxlib.o(i.luaL_newstate)
 <LI><a href="#[aa]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[a7]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[ab]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[9f]">resume</a> from ldo.o(i.resume) referenced from ldo.o(i.lua_resume)
 <LI><a href="#[d9]">searcher_C</a> from loadlib.o(i.searcher_C) referenced from loadlib.o(.constdata)
 <LI><a href="#[da]">searcher_Croot</a> from loadlib.o(i.searcher_Croot) referenced from loadlib.o(.constdata)
 <LI><a href="#[d8]">searcher_Lua</a> from loadlib.o(i.searcher_Lua) referenced from loadlib.o(.constdata)
 <LI><a href="#[d7]">searcher_preload</a> from loadlib.o(i.searcher_preload) referenced from loadlib.o(.constdata)
 <LI><a href="#[b7]">sort</a> from ltablib.o(i.sort) referenced from ltablib.o(.constdata)
 <LI><a href="#[b8]">str_byte</a> from lstrlib.o(i.str_byte) referenced from lstrlib.o(.constdata)
 <LI><a href="#[b9]">str_char</a> from lstrlib.o(i.str_char) referenced from lstrlib.o(.constdata)
 <LI><a href="#[ba]">str_dump</a> from lstrlib.o(i.str_dump) referenced from lstrlib.o(.constdata)
 <LI><a href="#[bb]">str_find</a> from lstrlib.o(i.str_find) referenced from lstrlib.o(.constdata)
 <LI><a href="#[bc]">str_format</a> from lstrlib.o(i.str_format) referenced from lstrlib.o(.constdata)
 <LI><a href="#[be]">str_gsub</a> from lstrlib.o(i.str_gsub) referenced from lstrlib.o(.constdata)
 <LI><a href="#[bf]">str_len</a> from lstrlib.o(i.str_len) referenced from lstrlib.o(.constdata)
 <LI><a href="#[c0]">str_lower</a> from lstrlib.o(i.str_lower) referenced from lstrlib.o(.constdata)
 <LI><a href="#[c1]">str_match</a> from lstrlib.o(i.str_match) referenced from lstrlib.o(.constdata)
 <LI><a href="#[c6]">str_pack</a> from lstrlib.o(i.str_pack) referenced from lstrlib.o(.constdata)
 <LI><a href="#[c7]">str_packsize</a> from lstrlib.o(i.str_packsize) referenced from lstrlib.o(.constdata)
 <LI><a href="#[c2]">str_rep</a> from lstrlib.o(i.str_rep) referenced from lstrlib.o(.constdata)
 <LI><a href="#[c3]">str_reverse</a> from lstrlib.o(i.str_reverse) referenced from lstrlib.o(.constdata)
 <LI><a href="#[c4]">str_sub</a> from lstrlib.o(i.str_sub) referenced from lstrlib.o(.constdata)
 <LI><a href="#[c8]">str_unpack</a> from lstrlib.o(i.str_unpack) referenced from lstrlib.o(.constdata)
 <LI><a href="#[c5]">str_upper</a> from lstrlib.o(i.str_upper) referenced from lstrlib.o(.constdata)
 <LI><a href="#[b1]">tconcat</a> from ltablib.o(i.tconcat) referenced from ltablib.o(.constdata)
 <LI><a href="#[a9]">theTimerCallback</a> from app.o(i.theTimerCallback) referenced from app.o(i.theTimerInit)
 <LI><a href="#[b2]">tinsert</a> from ltablib.o(i.tinsert) referenced from ltablib.o(.constdata)
 <LI><a href="#[b6]">tmove</a> from ltablib.o(i.tmove) referenced from ltablib.o(.constdata)
 <LI><a href="#[b5]">tremove</a> from ltablib.o(i.tremove) referenced from ltablib.o(.constdata)
 <LI><a href="#[85]">ubasic_task</a> from app.o(i.ubasic_task) referenced from app.o(i.can_up_task)
 <LI><a href="#[b4]">unpack</a> from ltablib.o(i.unpack) referenced from ltablib.o(.constdata)
 <LI><a href="#[a0]">unroll</a> from ldo.o(i.unroll) referenced from ldo.o(i.lua_resume)
 <LI><a href="#[d]">usart_init</a> from usart.o(i.usart_init) referenced 2 times from app.o(.data)
 <LI><a href="#[e]">usart_sen_byte</a> from usart.o(i.usart_sen_byte) referenced 2 times from app.o(.data)
 <LI><a href="#[ae]">utfchar</a> from lutf8lib.o(i.utfchar) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[af]">utflen</a> from lutf8lib.o(i.utflen) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[25]">w25qxx_erase_chip</a> from w25qxx.o(i.w25qxx_erase_chip) referenced 2 times from diskio.o(.data)
 <LI><a href="#[26]">w25qxx_erase_sector</a> from w25qxx.o(i.w25qxx_erase_sector) referenced 2 times from diskio.o(.data)
 <LI><a href="#[24]">w25qxx_get_id</a> from w25qxx.o(i.w25qxx_get_id) referenced 2 times from diskio.o(.data)
 <LI><a href="#[21]">w25qxx_init</a> from w25qxx.o(i.w25qxx_init) referenced 2 times from diskio.o(.data)
 <LI><a href="#[27]">w25qxx_power_down</a> from w25qxx.o(i.w25qxx_power_down) referenced 2 times from diskio.o(.data)
 <LI><a href="#[23]">w25qxx_read</a> from w25qxx.o(i.w25qxx_read) referenced 2 times from diskio.o(.data)
 <LI><a href="#[28]">w25qxx_wake_up</a> from w25qxx.o(i.w25qxx_wake_up) referenced 2 times from diskio.o(.data)
 <LI><a href="#[22]">w25qxx_write</a> from w25qxx.o(i.w25qxx_write) referenced 2 times from diskio.o(.data)
 <LI><a href="#[a8]">writer</a> from lstrlib.o(i.writer) referenced from lstrlib.o(i.str_dump)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[13b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[13c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[13e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[5dd]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5de]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5df]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[5e0]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[5e1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[13f]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[1a0]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[141]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[143]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[145]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[146]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[147]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[5e2]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[149]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14c]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14d]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[14f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[151]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[153]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[154]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[155]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[157]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[5e3]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[159]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[15b]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[15d]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[15f]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[5e4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[179]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[5e5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[161]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5e6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[5e7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[163]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[5e8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[165]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[5e9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[167]"></a>__rt_lib_init_lc_collate_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_collate_2 &rArr; _get_lc_collate
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate
</UL>

<P><STRONG><a name="[5ea]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[169]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[5eb]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_lc_monetary_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_monetary_2 &rArr; _get_lc_monetary
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary
</UL>

<P><STRONG><a name="[5ec]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[5ed]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_lc_time_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_time_2 &rArr; _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
</UL>

<P><STRONG><a name="[5ee]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[5ef]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[5f0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[5f1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[5f2]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[5f3]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[170]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[172]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_argv_1 &rArr; __ARM_argv_veneer &rArr; __ARM_get_argv &rArr; _handle_redirection &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[5f4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[5f5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[5f6]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[5f7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[5f8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[17e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[5f9]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[174]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[5fa]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[5fb]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[5fc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[5fd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[5fe]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[5ff]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[13d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[600]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[176]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[178]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[601]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[17a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 3512 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; test &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[602]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1bf]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[17d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[603]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[17f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[39]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5bf]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[3b]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[604]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[52f]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
</UL>

<P><STRONG><a name="[173]"></a>__ARM_argv_veneer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, argv_veneer.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = __ARM_argv_veneer &rArr; __ARM_get_argv &rArr; _handle_redirection &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_argv_1
</UL>

<P><STRONG><a name="[605]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[33]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1fa]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[606]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[607]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[608]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdigits
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[1ad]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[609]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[60a]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>

<P><STRONG><a name="[187]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[188]"></a>realloc</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, h1_realloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[60b]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[510]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
</UL>

<P><STRONG><a name="[60c]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[507]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
</UL>

<P><STRONG><a name="[18a]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[18c]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>

<P><STRONG><a name="[18d]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
</UL>

<P><STRONG><a name="[18e]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_up_task
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_timedout
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_connected
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_closed
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_acked
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_aborted
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_modbus_appcall
</UL>

<P><STRONG><a name="[190]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
</UL>

<P><STRONG><a name="[191]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>

<P><STRONG><a name="[194]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[195]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[196]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[197]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[193]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[14a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[140]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[199]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[152]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[19c]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[14e]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[156]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[19d]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[150]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[158]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[142]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[19e]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[43a]"></a>clearerr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clearerr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[442]"></a>feof</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, feof.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getF
</UL>

<P><STRONG><a name="[1a7]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[1a1]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[1a4]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_flush
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
</UL>

<P><STRONG><a name="[1a5]"></a>fgets</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fgets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fgets &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
</UL>

<P><STRONG><a name="[1a8]"></a>fread</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, fread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fread &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getF
</UL>

<P><STRONG><a name="[1a3]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[3f6]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
</UL>

<P><STRONG><a name="[1aa]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[3f7]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ftell
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
</UL>

<P><STRONG><a name="[1ae]"></a>fwrite</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fwrite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fwrite &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
</UL>

<P><STRONG><a name="[1af]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eof
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextc
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipBOM
</UL>

<P><STRONG><a name="[1d5]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_redirection
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dup
</UL>

<P><STRONG><a name="[1b0]"></a>tmpnam</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tmpnam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmpnam
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_tmpnam
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmpname
</UL>

<P><STRONG><a name="[1b2]"></a>tmpfile</STRONG> (Thumb, 42 bytes, Stack size 264 bytes, tmpnam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = tmpfile &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_tmpnam
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tmpfile
</UL>

<P><STRONG><a name="[60d]"></a>_ungetc_internal</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ungetc.o(.text), UNUSED)

<P><STRONG><a name="[579]"></a>ungetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ungetc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eof
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
</UL>

<P><STRONG><a name="[1b4]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_redirection
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1b3]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readable
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmpfile
</UL>

<P><STRONG><a name="[1b5]"></a>_fclose_internal</STRONG> (Thumb, 102 bytes, Stack size 288 bytes, fclose_tmpfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_tmpnam
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1ef]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 288 bytes, fclose_tmpfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_fclose
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readable
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dup
</UL>

<P><STRONG><a name="[1ba]"></a>setlocale</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, locale.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
</UL>

<P><STRONG><a name="[1bc]"></a>localeconv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, localeconv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = localeconv &rArr; _get_lconv
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lconv
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkdp
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
</UL>

<P><STRONG><a name="[1be]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[164]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[17c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1c0]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[1c2]"></a>strcoll</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, strcoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcoll
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
</UL>

<P><STRONG><a name="[3c8]"></a>strerror</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[31a]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checkmode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnexttemplate
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makemask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[471]"></a>strpbrk</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nospecials
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
</UL>

<P><STRONG><a name="[2d6]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checkmode
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
</UL>

<P><STRONG><a name="[4ea]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
</UL>

<P><STRONG><a name="[317]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_capture
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmemfind
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
</UL>

<P><STRONG><a name="[282]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_file
</UL>

<P><STRONG><a name="[281]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dostring
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nospecials
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checkmode
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnexttemplate
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_file
</UL>

<P><STRONG><a name="[313]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmemfind
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkdp
</UL>

<P><STRONG><a name="[571]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[320]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy2buff
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortSendResponse
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_modbus_appcall
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReportSlaveID
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[60e]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[60f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[610]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[611]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
</UL>

<P><STRONG><a name="[612]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1c6]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[613]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[614]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1c3]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary
</UL>

<P><STRONG><a name="[1c9]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[1cb]"></a>mktime</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
</UL>

<P><STRONG><a name="[1cf]"></a>strftime</STRONG> (Thumb, 634 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = strftime &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_weekbasedyear
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_findweek
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[615]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[616]"></a>_main_redirection</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _main_redirect.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>_handle_redirection</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, _main_redirect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _handle_redirection &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dup
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>

<P><STRONG><a name="[4bb]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>

<P><STRONG><a name="[4bf]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[617]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[618]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[166]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lconv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[619]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[61a]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1d8]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[162]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[1da]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[61b]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1db]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[1dc]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[1d2]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[198]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[61c]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[192]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[7d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[1e6]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[15a]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[15c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[18f]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1e7]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[15e]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[160]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[1ea]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[1ac]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1eb]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[1a2]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[1ee]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[1d6]"></a>__dup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, __dup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __dup &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_redirection
</UL>

<P><STRONG><a name="[1f0]"></a>_fisatty</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, __dup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>

<P><STRONG><a name="[171]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[175]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[1bd]"></a>_get_lconv</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, _lconv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lconv
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>

<P><STRONG><a name="[1bb]"></a>_setlocale_r</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>

<P><STRONG><a name="[19a]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[1c1]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1d4]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_redirection
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1ca]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[61d]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__ARM_get_argv</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, _get_argv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = __ARM_get_argv &rArr; _handle_redirection &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_command_string
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_redirection
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[61e]"></a>__use_no_heap_region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[61f]"></a>__heap_region$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hrguard.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[82]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[1e4]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[80]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[1de]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1f4]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1f3]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1f5]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1d9]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[177]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1fe]"></a>_scanf_really_real</STRONG> (Thumb, 668 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[1f7]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[1f8]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[203]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[5dc]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[204]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[1df]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[208]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[207]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[20b]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[209]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[20a]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[1e0]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[1fd]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1e1]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[1fc]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[20c]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[20d]"></a>BSP_SPI1SendByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, enc28j60.o(i.BSP_SPI1SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writeop
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writebuf
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_readop
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_readBuffer
</UL>

<P><STRONG><a name="[249]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CAN_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[211]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[2ee]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_set_id
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[213]"></a>CAN_GetITStatus</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, stm32f10x_can.o(i.CAN_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2ef]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[2ed]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f10x_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[24a]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2ec]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CAN_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[2f0]"></a>CAN_Transmit</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_send
</UL>

<P><STRONG><a name="[2f1]"></a>CAN_TransmitStatus</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_TransmitStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_TransmitStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_send
</UL>

<P><STRONG><a name="[2e8]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[47f]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_tager
</UL>

<P><STRONG><a name="[2e9]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wake_up
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_power_down
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_get_id
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_chip
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_page
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_sr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writeop
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writebuf
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_readop
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_readBuffer
</UL>

<P><STRONG><a name="[3b9]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wake_up
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_power_down
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_get_id
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_chip
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_page
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_sr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writeop
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writebuf
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_readop
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_readBuffer
</UL>

<P><STRONG><a name="[47e]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_tager
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[2eb]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[2ea]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[212]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[2e7]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[248]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[3b8]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_init
</UL>

<P><STRONG><a name="[20e]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_send_byte
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1SendByte
</UL>

<P><STRONG><a name="[210]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_send_byte
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1SendByte
</UL>

<P><STRONG><a name="[20f]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_send_byte
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1SendByte
</UL>

<P><STRONG><a name="[3b6]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_init
</UL>

<P><STRONG><a name="[3b7]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_SSOutputCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_init
</UL>

<P><STRONG><a name="[3c]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[5b1]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[5b0]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[3fb]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_sen_byte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[247]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[3fc]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[427]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_sen_byte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[51]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, can.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e3]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[24b]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[254]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[255]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[256]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[258]"></a>__kernel_tan</STRONG> (Thumb, 586 bytes, Stack size 80 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>

<P><STRONG><a name="[25a]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[25b]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[25c]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[25d]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[25e]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[257]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[201]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[25f]"></a>__mathlib_tofloat</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[206]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[19f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1b8]"></a>_sys_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[1f6]"></a>_sys_command_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i._sys_command_string))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>

<P><STRONG><a name="[180]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1ab]"></a>_sys_flen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1a9]"></a>_sys_istty</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fisatty
</UL>

<P><STRONG><a name="[1b6]"></a>_sys_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i._sys_open))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1ec]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1b1]"></a>_sys_tmpnam</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i._sys_tmpnam))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmpfile
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmpnam
</UL>

<P><STRONG><a name="[1ed]"></a>_sys_write</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usart.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[202]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[263]"></a>acos</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, acos.o(i.acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = acos &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
</UL>

<P><STRONG><a name="[299]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
</UL>

<P><STRONG><a name="[2a5]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[2a6]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
</UL>

<P><STRONG><a name="[20]"></a>bxcan_get_packget</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(i.bxcan_get_packget))
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>bxcan_init</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, can.o(i.bxcan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bxcan_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>bxcan_send</STRONG> (Thumb, 216 bytes, Stack size 112 bytes, can.o(i.bxcan_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bxcan_send &rArr; CAN_TransmitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>bxcan_set_id</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, can.o(i.bxcan_set_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bxcan_set_id &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>can_task</STRONG> (Thumb, 840 bytes, Stack size 8 bytes, app.o(i.can_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = can_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[a3]"></a>can_up_task</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, app.o(i.can_up_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = can_up_task &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[2fd]"></a>ceil</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
</UL>

<P><STRONG><a name="[46e]"></a>clock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i.clock))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_randomizePivot
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock
</UL>

<P><STRONG><a name="[35c]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
</UL>

<P><STRONG><a name="[520]"></a>delay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[391]"></a>difftime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, difftime.o(i.difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = difftime &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
</UL>

<P><STRONG><a name="[3e2]"></a>disk_initialize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[3e3]"></a>disk_ioctl</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[3f4]"></a>disk_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[403]"></a>disk_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[398]"></a>disk_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[534]"></a>eMBEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mb.o(i.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_init
</UL>

<P><STRONG><a name="[2f]"></a>eMBFuncReadCoils</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, mbfunccoils.o(i.eMBFuncReadCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = eMBFuncReadCoils &rArr; eMBRegCoilsCB
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>eMBFuncReadDiscreteInputs</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, mbfuncdisc.o(i.eMBFuncReadDiscreteInputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eMBFuncReadDiscreteInputs &rArr; eMBRegDiscreteCB
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>eMBFuncReadInputRegister</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, mbfuncinput.o(i.eMBFuncReadInputRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBFuncReadInputRegister &rArr; eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>eMBFuncReportSlaveID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mbfuncother.o(i.eMBFuncReportSlaveID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReportSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>eMBFuncWriteCoil</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mbfunccoils.o(i.eMBFuncWriteCoil))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = eMBFuncWriteCoil &rArr; eMBRegCoilsCB
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mbfuncholding.o(i.eMBFuncWriteHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBFuncWriteHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>eMBFuncWriteMultipleCoils</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, mbfunccoils.o(i.eMBFuncWriteMultipleCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = eMBFuncWriteMultipleCoils &rArr; eMBRegCoilsCB
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[3ac]"></a>eMBPoll</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, mb.o(i.eMBPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[3a7]"></a>eMBRegCoilsCB</STRONG> (Thumb, 198 bytes, Stack size 28 bytes, modbus.o(i.eMBRegCoilsCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = eMBRegCoilsCB
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[3a9]"></a>eMBRegDiscreteCB</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, modbus.o(i.eMBRegDiscreteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBRegDiscreteCB
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
</UL>

<P><STRONG><a name="[3aa]"></a>eMBRegHoldingCB</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, modbus.o(i.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBRegHoldingCB
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[3ab]"></a>eMBRegInputCB</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, modbus.o(i.eMBRegInputCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = eMBRegInputCB
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
</UL>

<P><STRONG><a name="[3af]"></a>eMBTCPDoInit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mbtcp.o(i.eMBTCPDoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBTCPDoInit &rArr; xMBTCPPortInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPInit
</UL>

<P><STRONG><a name="[3b1]"></a>eMBTCPInit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mb.o(i.eMBTCPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBTCPInit &rArr; eMBTCPDoInit &rArr; xMBTCPPortInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPDoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_init
</UL>

<P><STRONG><a name="[8c]"></a>eMBTCPReceive</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mbtcp.o(i.eMBTCPReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBTCPReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortGetRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBTCPInit)
</UL>
<P><STRONG><a name="[8d]"></a>eMBTCPSend</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, mbtcp.o(i.eMBTCPSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBTCPSend &rArr; xMBTCPPortSendResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortSendResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBTCPInit)
</UL>
<P><STRONG><a name="[8a]"></a>eMBTCPStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbtcp.o(i.eMBTCPStart))
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBTCPInit)
</UL>
<P><STRONG><a name="[8b]"></a>eMBTCPStop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mbtcp.o(i.eMBTCPStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBTCPStop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBTCPPortDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBTCPInit)
</UL>
<P><STRONG><a name="[10]"></a>en28j60_init</STRONG> (Thumb, 574 bytes, Stack size 32 bytes, enc28j60.o(i.en28j60_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = en28j60_init &rArr; enc28j60_writephy &rArr; enc28j60_write &rArr; enc28j60_setbank &rArr; enc28j60_writeop &rArr; BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputCmd
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writephy
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writeop
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_write
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_setbank
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>en28j60_packet_receive</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, enc28j60.o(i.en28j60_packet_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = en28j60_packet_receive &rArr; enc28j60_write &rArr; enc28j60_setbank &rArr; enc28j60_writeop &rArr; BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writeop
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_write
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_readop
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_readBuffer
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>en28j60_packet_send</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, enc28j60.o(i.en28j60_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = en28j60_packet_send &rArr; enc28j60_write &rArr; enc28j60_setbank &rArr; enc28j60_writeop &rArr; BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writeop
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writebuf
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_write
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_setbank
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>en28j60_set_mac</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, enc28j60.o(i.en28j60_set_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = en28j60_set_mac &rArr; enc28j60_write &rArr; enc28j60_setbank &rArr; enc28j60_writeop &rArr; BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[3bb]"></a>enc28j60_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = enc28j60_read &rArr; enc28j60_setbank &rArr; enc28j60_writeop &rArr; BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_setbank
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_readop
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_packet_send
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_packet_receive
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writephy
</UL>

<P><STRONG><a name="[3c0]"></a>enc28j60_readBuffer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60_readBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60_readBuffer &rArr; BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_packet_receive
</UL>

<P><STRONG><a name="[3bf]"></a>enc28j60_readop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60_readop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60_readop &rArr; BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_packet_receive
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_read
</UL>

<P><STRONG><a name="[3be]"></a>enc28j60_setbank</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60_setbank))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60_setbank &rArr; enc28j60_writeop &rArr; BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writeop
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_packet_send
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_write
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_read
</UL>

<P><STRONG><a name="[3bc]"></a>enc28j60_write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enc28j60_write &rArr; enc28j60_setbank &rArr; enc28j60_writeop &rArr; BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writeop
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_setbank
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_set_mac
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_packet_send
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_packet_receive
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_writephy
</UL>

<P><STRONG><a name="[3c1]"></a>enc28j60_writebuf</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60_writebuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60_writebuf &rArr; BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_packet_send
</UL>

<P><STRONG><a name="[3ba]"></a>enc28j60_writeop</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, enc28j60.o(i.enc28j60_writeop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enc28j60_writeop &rArr; BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI1SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_packet_send
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_packet_receive
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_init
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_write
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_setbank
</UL>

<P><STRONG><a name="[3bd]"></a>enc28j60_writephy</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60_writephy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enc28j60_writephy &rArr; enc28j60_write &rArr; enc28j60_setbank &rArr; enc28j60_writeop &rArr; BSP_SPI1SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_write
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;en28j60_init
</UL>

<P><STRONG><a name="[3cb]"></a>exp</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, exp.o(i.exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = exp &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
</UL>

<P><STRONG><a name="[3d3]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[3d8]"></a>f_gets</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ff.o(i.f_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_gets &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[3e0]"></a>f_mkfs</STRONG> (Thumb, 1664 bytes, Stack size 136 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = f_mkfs &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[3e7]"></a>f_mount</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[3e9]"></a>f_open</STRONG> (Thumb, 454 bytes, Stack size 104 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[3d9]"></a>f_read</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[3d4]"></a>f_sync</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[3fa]"></a>f_write</STRONG> (Thumb, 482 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
</UL>

<P><STRONG><a name="[1a6]"></a>fgetc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>

<P><STRONG><a name="[41b]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
</UL>

<P><STRONG><a name="[41c]"></a>fmod</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fmod.o(i.fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fmod &rArr; __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
</UL>

<P><STRONG><a name="[7f]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[260]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[3e6]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[535]"></a>htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uip.o(i.htons))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[262]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[1a]"></a>led_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = led_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>led_set</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, led.o(i.led_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_set
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>led_tager</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, led.o(i.led_tager))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_tager
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[48f]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[490]"></a>log10</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, log10.o(i.log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
</UL>

<P><STRONG><a name="[491]"></a>log2</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, log2.o(i.log2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = log2 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
</UL>

<P><STRONG><a name="[27f]"></a>luaC_barrier_</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lgc.o(i.luaC_barrier_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setuservalue
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
</UL>

<P><STRONG><a name="[2c8]"></a>luaC_barrierback_</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lgc.o(i.luaC_barrierback_))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>

<P><STRONG><a name="[4a2]"></a>luaC_checkfinalizer</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lgc.o(i.luaC_checkfinalizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = luaC_checkfinalizer &rArr; sweeptolive &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeptolive
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>

<P><STRONG><a name="[501]"></a>luaC_fix</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lgc.o(i.luaC_fix))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>

<P><STRONG><a name="[32f]"></a>luaC_freeallobjects</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lgc.o(i.luaC_freeallobjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = luaC_freeallobjects &rArr; callallpendingfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callallpendingfinalizers
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[4a5]"></a>luaC_fullgc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lgc.o(i.luaC_fullgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
</UL>

<P><STRONG><a name="[374]"></a>luaC_newobj</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lgc.o(i.luaC_newobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = luaC_newobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
</UL>

<P><STRONG><a name="[4a6]"></a>luaC_runtilstate</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lgc.o(i.luaC_runtilstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[32c]"></a>luaC_step</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lgc.o(i.luaC_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
</UL>

<P><STRONG><a name="[4ac]"></a>luaC_upvalbarrier_</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lgc.o(i.luaC_upvalbarrier_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
</UL>

<P><STRONG><a name="[429]"></a>luaC_upvdeccount</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lgc.o(i.luaC_upvdeccount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaC_upvdeccount &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeLclosure
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
</UL>

<P><STRONG><a name="[4ad]"></a>luaD_call</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ldo.o(i.luaD_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackerror
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>

<P><STRONG><a name="[3a6]"></a>luaD_callnoyield</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ldo.o(i.luaD_callnoyield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dothecall
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_call
</UL>

<P><STRONG><a name="[459]"></a>luaD_growstack</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ldo.o(i.luaD_growstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growstack
</UL>

<P><STRONG><a name="[2f8]"></a>luaD_hook</STRONG> (Thumb, 138 bytes, Stack size 136 bytes, ldo.o(i.luaD_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callhook
</UL>

<P><STRONG><a name="[4b2]"></a>luaD_inctop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ldo.o(i.luaD_inctop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = luaD_inctop &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
</UL>

<P><STRONG><a name="[225]"></a>luaD_pcall</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, ldo.o(i.luaD_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = luaD_pcall &rArr;  luaF_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[419]"></a>luaD_poscall</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, ldo.o(i.luaD_poscall))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = luaD_poscall &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveresults
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishCcall
</UL>

<P><STRONG><a name="[4af]"></a>luaD_precall</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, ldo.o(i.luaD_precall))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + In Cycle
<LI>Call Chain = luaD_precall &rArr;  luaD_precall (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callhook
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_varargs
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>

<P><STRONG><a name="[4ba]"></a>luaD_protectedparser</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, ldo.o(i.luaD_protectedparser))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[4b3]"></a>luaD_rawrunprotected</STRONG> (Thumb, 54 bytes, Stack size 200 bytes, ldo.o(i.luaD_rawrunprotected))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>

<P><STRONG><a name="[4b1]"></a>luaD_reallocstack</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ldo.o(i.luaD_reallocstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = luaD_reallocstack &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctstack
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[4b5]"></a>luaD_shrinkstack</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ldo.o(i.luaD_shrinkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = luaD_shrinkstack &rArr; luaD_reallocstack &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackinuse
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
</UL>

<P><STRONG><a name="[227]"></a>luaD_throw</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ldo.o(i.luaD_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackerror
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[4b7]"></a>luaE_extendCI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lstate.o(i.luaE_extendCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaE_extendCI &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[430]"></a>luaE_freeCI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lstate.o(i.luaE_freeCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaE_freeCI &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[42e]"></a>luaE_freethread</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lstate.o(i.luaE_freethread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = luaE_freethread &rArr;  luaF_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[4aa]"></a>luaE_setdebt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lstate.o(i.luaE_setdebt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
</UL>

<P><STRONG><a name="[4be]"></a>luaE_shrinkCI</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lstate.o(i.luaE_shrinkCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaE_shrinkCI &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[32e]"></a>luaF_close</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lfunc.o(i.luaF_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = luaF_close &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>

<P><STRONG><a name="[4c0]"></a>luaF_findupval</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lfunc.o(i.luaF_findupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = luaF_findupval &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
</UL>

<P><STRONG><a name="[42c]"></a>luaF_freeproto</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lfunc.o(i.luaF_freeproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaF_freeproto &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[415]"></a>luaF_getlocalname</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lfunc.o(i.luaF_getlocalname))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
</UL>

<P><STRONG><a name="[3f1]"></a>luaF_initupvals</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lfunc.o(i.luaF_initupvals))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = luaF_initupvals &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[4c1]"></a>luaF_newCclosure</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lfunc.o(i.luaF_newCclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaF_newCclosure &rArr; luaC_newobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>

<P><STRONG><a name="[4c2]"></a>luaF_newLclosure</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lfunc.o(i.luaF_newLclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaF_newLclosure &rArr; luaC_newobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[241]"></a>luaF_newproto</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lfunc.o(i.luaF_newproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaF_newproto &rArr; luaC_newobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
</UL>

<P><STRONG><a name="[480]"></a>luaG_addinfo</STRONG> (Thumb, 58 bytes, Stack size 88 bytes, ldebug.o(i.luaG_addinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>

<P><STRONG><a name="[4c3]"></a>luaG_concaterror</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ldebug.o(i.luaG_concaterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = luaG_concaterror &rArr; luaG_typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[4c5]"></a>luaG_errormsg</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ldebug.o(i.luaG_errormsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384 + In Cycle
<LI>Call Chain = luaG_errormsg &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
</UL>

<P><STRONG><a name="[4c6]"></a>luaG_opinterror</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ldebug.o(i.luaG_opinterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = luaG_opinterror &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[4c7]"></a>luaG_ordererror</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ldebug.o(i.luaG_ordererror))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = luaG_ordererror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[40c]"></a>luaG_runerror</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, ldebug.o(i.luaG_runerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackerror
</UL>

<P><STRONG><a name="[4ca]"></a>luaG_tointerror</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ldebug.o(i.luaG_tointerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + In Cycle
<LI>Call Chain = luaG_tointerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[4cc]"></a>luaG_traceexec</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ldebug.o(i.luaG_traceexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + In Cycle
<LI>Call Chain = luaG_traceexec &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[4c4]"></a>luaG_typeerror</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ldebug.o(i.luaG_typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = luaG_typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
</UL>

<P><STRONG><a name="[42d]"></a>luaH_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ltable.o(i.luaH_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaH_free &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[4cd]"></a>luaH_get</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ltable.o(i.luaH_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
</UL>

<P><STRONG><a name="[4cf]"></a>luaH_getint</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ltable.o(i.luaH_getint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaH_getint
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unbound_search
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
</UL>

<P><STRONG><a name="[4d0]"></a>luaH_getn</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ltable.o(i.luaH_getn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = luaH_getn &rArr; unbound_search &rArr; luaH_getint
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unbound_search
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
</UL>

<P><STRONG><a name="[4ce]"></a>luaH_getshortstr</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, ltable.o(i.luaH_getshortstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
</UL>

<P><STRONG><a name="[2bf]"></a>luaH_getstr</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ltable.o(i.luaH_getstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = luaH_getstr &rArr; getgeneric &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>

<P><STRONG><a name="[34c]"></a>luaH_new</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ltable.o(i.luaH_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaH_new &rArr; luaC_newobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
</UL>

<P><STRONG><a name="[4d3]"></a>luaH_newkey</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, ltable.o(i.luaH_newkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + In Cycle
<LI>Call Chain = luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfreepos
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
</UL>

<P><STRONG><a name="[4d6]"></a>luaH_next</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ltable.o(i.luaH_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = luaH_next &rArr; findindex &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>

<P><STRONG><a name="[45d]"></a>luaH_resize</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, ltable.o(i.luaH_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + In Cycle
<LI>Call Chain = luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setarrayvector
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
</UL>

<P><STRONG><a name="[4d8]"></a>luaH_resizearray</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ltable.o(i.luaH_resizearray))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = luaH_resizearray &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[27c]"></a>luaH_set</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ltable.o(i.luaH_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + In Cycle
<LI>Call Chain = luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
</UL>

<P><STRONG><a name="[34d]"></a>luaH_setint</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, ltable.o(i.luaH_setint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = luaH_setint &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
</UL>

<P><STRONG><a name="[424]"></a>luaK_checkstack</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcode.o(i.luaK_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[306]"></a>luaK_codeABC</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lcode.o(i.luaK_codeABC))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
</UL>

<P><STRONG><a name="[33b]"></a>luaK_codeABx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lcode.o(i.luaK_codeABx))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = luaK_codeABx &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
</UL>

<P><STRONG><a name="[39d]"></a>luaK_codek</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcode.o(i.luaK_codek))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[3ce]"></a>luaK_concat</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcode.o(i.luaK_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944 + Unknown Stack Size
<LI>Call Chain = luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[341]"></a>luaK_dischargevars</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lcode.o(i.luaK_dischargevars))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = luaK_dischargevars &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[338]"></a>luaK_exp2RK</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lcode.o(i.luaK_exp2RK))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192 + Unknown Stack Size
<LI>Call Chain = luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nilK
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolK
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>

<P><STRONG><a name="[34a]"></a>luaK_exp2anyreg</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2anyreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
</UL>

<P><STRONG><a name="[401]"></a>luaK_exp2anyregup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2anyregup))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + Unknown Stack Size
<LI>Call Chain = luaK_exp2anyregup &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[295]"></a>luaK_exp2nextreg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2nextreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closelistfield
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[4da]"></a>luaK_exp2val</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2val))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + Unknown Stack Size
<LI>Call Chain = luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
</UL>

<P><STRONG><a name="[33a]"></a>luaK_fixline</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcode.o(i.luaK_fixline))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>

<P><STRONG><a name="[336]"></a>luaK_getlabel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcode.o(i.luaK_getlabel))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
</UL>

<P><STRONG><a name="[4dc]"></a>luaK_goiffalse</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcode.o(i.luaK_goiffalse))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = luaK_goiffalse &rArr; jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[350]"></a>luaK_goiftrue</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lcode.o(i.luaK_goiftrue))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = luaK_goiftrue &rArr; jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
</UL>

<P><STRONG><a name="[402]"></a>luaK_indexed</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcode.o(i.luaK_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208 + Unknown Stack Size
<LI>Call Chain = luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[4dd]"></a>luaK_infix</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lcode.o(i.luaK_infix))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208 + Unknown Stack Size
<LI>Call Chain = luaK_infix &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[39f]"></a>luaK_intK</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, lcode.o(i.luaK_intK))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
<LI>Call Chain = luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[351]"></a>luaK_jump</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcode.o(i.luaK_jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = luaK_jump &rArr; luaK_codeABx &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>

<P><STRONG><a name="[296]"></a>luaK_nil</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lcode.o(i.luaK_nil))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048 + Unknown Stack Size
<LI>Call Chain = luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[40e]"></a>luaK_patchclose</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcode.o(i.luaK_patchclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaK_patchclose &rArr; getjump
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movegotosout
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
</UL>

<P><STRONG><a name="[332]"></a>luaK_patchlist</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lcode.o(i.luaK_patchlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>

<P><STRONG><a name="[3d0]"></a>luaK_patchtohere</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcode.o(i.luaK_patchtohere))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[4de]"></a>luaK_posfix</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, lcode.o(i.luaK_posfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264 + Unknown Stack Size
<LI>Call Chain = luaK_posfix &rArr; codecomp &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[4df]"></a>luaK_prefix</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcode.o(i.luaK_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208 + Unknown Stack Size
<LI>Call Chain = luaK_prefix &rArr; codeunexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[294]"></a>luaK_reserveregs</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcode.o(i.luaK_reserveregs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = luaK_reserveregs &rArr; luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
</UL>

<P><STRONG><a name="[32b]"></a>luaK_ret</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lcode.o(i.luaK_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = luaK_ret &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[4e0]"></a>luaK_self</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lcode.o(i.luaK_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224 + Unknown Stack Size
<LI>Call Chain = luaK_self &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[334]"></a>luaK_setlist</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lcode.o(i.luaK_setlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048 + Unknown Stack Size
<LI>Call Chain = luaK_setlist &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closelistfield
</UL>

<P><STRONG><a name="[2a2]"></a>luaK_setoneret</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcode.o(i.luaK_setoneret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaK_setoneret
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[293]"></a>luaK_setreturns</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lcode.o(i.luaK_setreturns))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952 + Unknown Stack Size
<LI>Call Chain = luaK_setreturns &rArr; luaK_reserveregs &rArr; luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[2a3]"></a>luaK_storevar</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lcode.o(i.luaK_storevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224 + Unknown Stack Size
<LI>Call Chain = luaK_storevar &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[348]"></a>luaK_stringK</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lcode.o(i.luaK_stringK))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = luaK_stringK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>

<P><STRONG><a name="[269]"></a>luaL_addlstring</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_addlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
</UL>

<P><STRONG><a name="[28b]"></a>luaL_addstring</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_addstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
</UL>

<P><STRONG><a name="[26e]"></a>luaL_addvalue</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_addvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
</UL>

<P><STRONG><a name="[289]"></a>luaL_argerror</STRONG> (Thumb, 122 bytes, Stack size 120 bytes, lauxlib.o(i.luaL_argerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checktime
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
</UL>

<P><STRONG><a name="[410]"></a>luaL_buffinit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lauxlib.o(i.luaL_buffinit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
</UL>

<P><STRONG><a name="[4e2]"></a>luaL_buffinitsize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_buffinitsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952 + Unknown Stack Size
<LI>Call Chain = luaL_buffinitsize &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[4e3]"></a>luaL_callmeta</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_callmeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = luaL_callmeta &rArr; lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msghandler
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[386]"></a>luaL_checkany</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkany))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
</UL>

<P><STRONG><a name="[2d1]"></a>luaL_checkinteger</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checkinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checktime
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ult
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>

<P><STRONG><a name="[2f2]"></a>luaL_checklstring</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checklstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_len
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rename
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_remove
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_getenv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[4e5]"></a>luaL_checknumber</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checknumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
</UL>

<P><STRONG><a name="[3f5]"></a>luaL_checkoption</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_checkoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[346]"></a>luaL_checkstack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
</UL>

<P><STRONG><a name="[2d2]"></a>luaL_checktype</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checktype))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + Unknown Stack Size
<LI>Call Chain = luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>

<P><STRONG><a name="[2b3]"></a>luaL_checkudata</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checkudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072 + Unknown Stack Size
<LI>Call Chain = luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pclose
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_fclose
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
</UL>

<P><STRONG><a name="[4e7]"></a>luaL_checkversion_</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, lauxlib.o(i.luaL_checkversion_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = luaL_checkversion_ &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_version
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_os
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
</UL>

<P><STRONG><a name="[268]"></a>luaL_error</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864 + Unknown Stack Size
<LI>Call Chain = luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbalance
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classend
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_capture
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_to_close
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmpname
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>

<P><STRONG><a name="[469]"></a>luaL_execresult</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_execresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = luaL_execresult &rArr; luaL_fileresult &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pclose
</UL>

<P><STRONG><a name="[3d7]"></a>luaL_fileresult</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_fileresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = luaL_fileresult &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rename
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_remove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tmpfile
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_fclose
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_flush
</UL>

<P><STRONG><a name="[49a]"></a>luaL_getmetafield</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_getmetafield))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = luaL_getmetafield &rArr; lua_rawget &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>

<P><STRONG><a name="[4e9]"></a>luaL_getsubtable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_getsubtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = luaL_getsubtable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
</UL>

<P><STRONG><a name="[48c]"></a>luaL_gsub</STRONG> (Thumb, 100 bytes, Stack size 4192 bytes, lauxlib.o(i.luaL_gsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 6168 + Unknown Stack Size
<LI>Call Chain = luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
</UL>

<P><STRONG><a name="[290]"></a>luaL_len</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888 + Unknown Stack Size
<LI>Call Chain = luaL_len &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
</UL>

<P><STRONG><a name="[376]"></a>luaL_loadbufferx</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, lauxlib.o(i.luaL_loadbufferx))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072 + Unknown Stack Size
<LI>Call Chain = luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dostring
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
</UL>

<P><STRONG><a name="[499]"></a>luaL_loadfilex</STRONG> (Thumb, 264 bytes, Stack size 560 bytes, lauxlib.o(i.luaL_loadfilex))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592 + Unknown Stack Size
<LI>Call Chain = luaL_loadfilex &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
</UL>

<P><STRONG><a name="[36d]"></a>luaL_newmetatable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_newmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
</UL>

<P><STRONG><a name="[4ed]"></a>luaL_newstate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lauxlib.o(i.luaL_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = luaL_newstate &rArr; lua_newstate &rArr; close_state &rArr; luaF_close &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_atpanic
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4ef]"></a>luaL_openlibs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, linit.o(i.luaL_openlibs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = luaL_openlibs &rArr; luaL_requiref &rArr; lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f3]"></a>luaL_optinteger</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[37e]"></a>luaL_optlstring</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[4f1]"></a>luaL_optnumber</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = luaL_optnumber &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
</UL>

<P><STRONG><a name="[267]"></a>luaL_prepbuffsize</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_prepbuffsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
<LI>Call Chain = luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packint
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
</UL>

<P><STRONG><a name="[412]"></a>luaL_pushresult</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_pushresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = luaL_pushresult &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
</UL>

<P><STRONG><a name="[4f3]"></a>luaL_pushresultsize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_pushresultsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = luaL_pushresultsize &rArr; luaL_pushresult &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[4f0]"></a>luaL_requiref</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_requiref))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = luaL_requiref &rArr; lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
</UL>

<P><STRONG><a name="[36e]"></a>luaL_setfuncs</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_setfuncs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_os
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
</UL>

<P><STRONG><a name="[4f5]"></a>luaL_setmetatable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = luaL_setmetatable &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>

<P><STRONG><a name="[46a]"></a>luaL_testudata</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_testudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = luaL_testudata &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
</UL>

<P><STRONG><a name="[26b]"></a>luaL_tolstring</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = luaL_tolstring &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
</UL>

<P><STRONG><a name="[38d]"></a>luaL_traceback</STRONG> (Thumb, 228 bytes, Stack size 136 bytes, lauxlib.o(i.luaL_traceback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048 + Unknown Stack Size
<LI>Call Chain = luaL_traceback &rArr; pushfuncname &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlevel
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msghandler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
</UL>

<P><STRONG><a name="[494]"></a>luaL_where</STRONG> (Thumb, 64 bytes, Stack size 112 bytes, lauxlib.o(i.luaL_where))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[27e]"></a>luaM_growaux_</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lmem.o(i.luaM_growaux_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>

<P><STRONG><a name="[238]"></a>luaM_realloc_</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lmem.o(i.luaM_realloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888 + Unknown Stack Size
<LI>Call Chain = luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setarrayvector
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvdeccount
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeLclosure
</UL>

<P><STRONG><a name="[237]"></a>luaM_toobig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lmem.o(i.luaM_toobig))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setarrayvector
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>

<P><STRONG><a name="[355]"></a>luaO_arith</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, lobject.o(i.luaO_arith))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaO_arith &rArr; luaT_trybinTM &rArr; luaT_callbinTM &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>

<P><STRONG><a name="[35f]"></a>luaO_ceillog2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lobject.o(i.luaO_ceillog2))
<BR><BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>

<P><STRONG><a name="[432]"></a>luaO_chunkid</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lobject.o(i.luaO_chunkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = luaO_chunkid &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcinfo
</UL>

<P><STRONG><a name="[508]"></a>luaO_fb2int</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lobject.o(i.luaO_fb2int))
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[44b]"></a>luaO_hexavalue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lobject.o(i.luaO_hexavalue))
<BR><BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
</UL>

<P><STRONG><a name="[359]"></a>luaO_int2fb</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lobject.o(i.luaO_int2fb))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[226]"></a>luaO_pushfstring</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lobject.o(i.luaO_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[4c9]"></a>luaO_pushvfstring</STRONG> (Thumb, 448 bytes, Stack size 64 bytes, lobject.o(i.luaO_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_utf8esc
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
</UL>

<P><STRONG><a name="[4fe]"></a>luaO_str2num</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lobject.o(i.luaO_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
</UL>

<P><STRONG><a name="[4fb]"></a>luaO_tostring</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, lobject.o(i.luaO_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = luaO_tostring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>

<P><STRONG><a name="[4fc]"></a>luaO_utf8esc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lobject.o(i.luaO_utf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaO_utf8esc
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>

<P><STRONG><a name="[2b1]"></a>luaS_clearcache</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lstring.o(i.luaS_clearcache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaS_clearcache
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[243]"></a>luaS_createlngstrobj</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lstring.o(i.luaS_createlngstrobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = luaS_createlngstrobj &rArr; createstrobj &rArr; luaC_newobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
</UL>

<P><STRONG><a name="[4ff]"></a>luaS_eqlngstr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lstring.o(i.luaS_eqlngstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaS_eqlngstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
</UL>

<P><STRONG><a name="[463]"></a>luaS_hash</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lstring.o(i.luaS_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hashlongstr
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
</UL>

<P><STRONG><a name="[500]"></a>luaS_hashlongstr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lstring.o(i.luaS_hashlongstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaS_hashlongstr &rArr; luaS_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>

<P><STRONG><a name="[3dc]"></a>luaS_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lstring.o(i.luaS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = luaS_init &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[2be]"></a>luaS_new</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lstring.o(i.luaS_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = luaS_new &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breaklabel
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_error
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>

<P><STRONG><a name="[242]"></a>luaS_newlstr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lstring.o(i.luaS_newlstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808 + Unknown Stack Size
<LI>Call Chain = luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>

<P><STRONG><a name="[502]"></a>luaS_newudata</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lstring.o(i.luaS_newudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808 + Unknown Stack Size
<LI>Call Chain = luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
</UL>

<P><STRONG><a name="[42f]"></a>luaS_remove</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lstring.o(i.luaS_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaS_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[304]"></a>luaS_resize</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lstring.o(i.luaS_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = luaS_resize &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSizes
</UL>

<P><STRONG><a name="[503]"></a>luaT_callTM</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, ltm.o(i.luaT_callTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>

<P><STRONG><a name="[504]"></a>luaT_callbinTM</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, ltm.o(i.luaT_callbinTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = luaT_callbinTM &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>

<P><STRONG><a name="[505]"></a>luaT_callorderTM</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ltm.o(i.luaT_callorderTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = luaT_callorderTM &rArr;  luaT_callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[4a3]"></a>luaT_gettm</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ltm.o(i.luaT_gettm))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = luaT_gettm &rArr; luaH_getshortstr
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[224]"></a>luaT_gettmbyobj</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ltm.o(i.luaT_gettmbyobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = luaT_gettmbyobj &rArr; luaH_getshortstr
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[3dd]"></a>luaT_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ltm.o(i.luaT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaT_init &rArr; luaS_new &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[4c8]"></a>luaT_objtypename</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ltm.o(i.luaT_objtypename))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = luaT_objtypename &rArr; luaS_new &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
</UL>

<P><STRONG><a name="[4f9]"></a>luaT_trybinTM</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, ltm.o(i.luaT_trybinTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = luaT_trybinTM &rArr; luaT_callbinTM &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[506]"></a>luaU_dump</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, ldump.o(i.luaU_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = luaU_dump &rArr; DumpFunction &rArr; DumpConstants &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_dump
</UL>

<P><STRONG><a name="[3ef]"></a>luaU_undump</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, lundump.o(i.luaU_undump))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = luaU_undump &rArr; LoadFunction &rArr; LoadConstants &rArr; LoadString &rArr; LoadByte &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[4fd]"></a>luaV_concat</STRONG> (Thumb, 454 bytes, Stack size 72 bytes, lvm.o(i.luaV_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = luaV_concat &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy2buff
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishOp
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>

<P><STRONG><a name="[460]"></a>luaV_div</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lvm.o(i.luaV_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = luaV_div &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[27d]"></a>luaV_equalobj</STRONG> (Thumb, 682 bytes, Stack size 56 bytes, lvm.o(i.luaV_equalobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + In Cycle
<LI>Call Chain = luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>

<P><STRONG><a name="[4b0]"></a>luaV_execute</STRONG> (Thumb, 7812 bytes, Stack size 104 bytes, lvm.o(i.luaV_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + In Cycle
<LI>Call Chain = luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_fb2int
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcached
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>

<P><STRONG><a name="[50f]"></a>luaV_finishOp</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, lvm.o(i.luaV_finishOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592 + Unknown Stack Size
<LI>Call Chain = luaV_finishOp &rArr; luaV_concat &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>

<P><STRONG><a name="[2c0]"></a>luaV_finishget</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lvm.o(i.luaV_finishget))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + In Cycle
<LI>Call Chain = luaV_finishget &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>

<P><STRONG><a name="[2c9]"></a>luaV_finishset</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, lvm.o(i.luaV_finishset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + In Cycle
<LI>Call Chain = luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>

<P><STRONG><a name="[50c]"></a>luaV_lessequal</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lvm.o(i.luaV_lessequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = luaV_lessequal &rArr; LEnum &rArr; LTintfloat &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>

<P><STRONG><a name="[50b]"></a>luaV_lessthan</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lvm.o(i.luaV_lessthan))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = luaV_lessthan &rArr; LTnum &rArr; LTintfloat &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>

<P><STRONG><a name="[45f]"></a>luaV_mod</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lvm.o(i.luaV_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = luaV_mod &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[50a]"></a>luaV_objlen</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, lvm.o(i.luaV_objlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + In Cycle
<LI>Call Chain = luaV_objlen &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
</UL>

<P><STRONG><a name="[461]"></a>luaV_shiftl</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lvm.o(i.luaV_shiftl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaV_shiftl
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[420]"></a>luaV_tointeger</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, lvm.o(i.luaV_tointeger))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
</UL>

<P><STRONG><a name="[421]"></a>luaV_tonumber_</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lvm.o(i.luaV_tonumber_))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
</UL>

<P><STRONG><a name="[3de]"></a>luaX_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, llex.o(i.luaX_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = luaX_init &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[3fd]"></a>luaX_lookahead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, llex.o(i.luaX_lookahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
<LI>Call Chain = luaX_lookahead &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[488]"></a>luaX_newstring</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, llex.o(i.luaX_newstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840 + Unknown Stack Size
<LI>Call Chain = luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[31e]"></a>luaX_next</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, llex.o(i.luaX_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
<LI>Call Chain = luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>

<P><STRONG><a name="[511]"></a>luaX_setinput</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, llex.o(i.luaX_setinput))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = luaX_setinput &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[29b]"></a>luaX_syntaxerror</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, llex.o(i.luaX_syntaxerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semerror
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>

<P><STRONG><a name="[30b]"></a>luaX_token2str</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, llex.o(i.luaX_token2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664 + Unknown Stack Size
<LI>Call Chain = luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
</UL>

<P><STRONG><a name="[3f0]"></a>luaY_parser</STRONG> (Thumb, 144 bytes, Stack size 168 bytes, lparser.o(i.luaY_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2944 + Unknown Stack Size
<LI>Call Chain = luaY_parser &rArr; mainfunc &rArr; statlist &rArr; statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[30d]"></a>luaZ_fill</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lzio.o(i.luaZ_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[518]"></a>luaZ_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lzio.o(i.luaZ_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaZ_init
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[232]"></a>luaZ_read</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lzio.o(i.luaZ_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaZ_read &rArr; luaZ_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>

<P><STRONG><a name="[4e4]"></a>lua_absindex</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lapi.o(i.lua_absindex))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
</UL>

<P><STRONG><a name="[4ee]"></a>lua_atpanic</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lapi.o(i.lua_atpanic))
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>

<P><STRONG><a name="[272]"></a>lua_callk</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lapi.o(i.lua_callk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
</UL>

<P><STRONG><a name="[2c2]"></a>lua_checkstack</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lapi.o(i.lua_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lua_checkstack &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
</UL>

<P><STRONG><a name="[513]"></a>lua_close</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstate.o(i.lua_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
<LI>Call Chain = lua_close &rArr; close_state &rArr; luaF_close &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
</UL>

<P><STRONG><a name="[514]"></a>lua_compare</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lapi.o(i.lua_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = lua_compare &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
</UL>

<P><STRONG><a name="[406]"></a>lua_concat</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lapi.o(i.lua_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[441]"></a>lua_copy</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lapi.o(i.lua_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lua_copy &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[369]"></a>lua_createtable</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lapi.o(i.lua_createtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = lua_createtable &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_os
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[515]"></a>lua_dump</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lapi.o(i.lua_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lua_dump &rArr; luaU_dump &rArr; DumpFunction &rArr; DumpConstants &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[495]"></a>lua_error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lapi.o(i.lua_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = lua_error &rArr; luaG_errormsg &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[497]"></a>lua_gc</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lapi.o(i.lua_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lua_gc &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[584]"></a>lua_getallocf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_getallocf))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>

<P><STRONG><a name="[311]"></a>lua_getfield</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lapi.o(i.lua_getfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getboolfield
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noenv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[49d]"></a>lua_getglobal</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lapi.o(i.lua_getglobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = lua_getglobal &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
</UL>

<P><STRONG><a name="[37a]"></a>lua_gethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ldebug.o(i.lua_gethook))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[37d]"></a>lua_gethookcount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ldebug.o(i.lua_gethookcount))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[379]"></a>lua_gethookmask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ldebug.o(i.lua_gethookmask))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[27a]"></a>lua_geti</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lapi.o(i.lua_geti))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = lua_geti &rArr; luaV_finishget &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
</UL>

<P><STRONG><a name="[380]"></a>lua_getinfo</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, ldebug.o(i.lua_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapextra
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[385]"></a>lua_getlocal</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ldebug.o(i.lua_getlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_getlocal &rArr; findlocal &rArr; findvararg
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapextra
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
</UL>

<P><STRONG><a name="[326]"></a>lua_getmetatable</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lapi.o(i.lua_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lua_getmetatable &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
</UL>

<P><STRONG><a name="[37f]"></a>lua_getstack</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ldebug.o(i.lua_getstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lua_getstack
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlevel
</UL>

<P><STRONG><a name="[273]"></a>lua_gettable</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lapi.o(i.lua_gettable))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = lua_gettable &rArr; luaV_finishget &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[2b5]"></a>lua_gettop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_gettop))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dofilecont
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yield
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[2d3]"></a>lua_getupvalue</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lapi.o(i.lua_getupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lua_getupvalue &rArr; aux_upvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_upvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>

<P><STRONG><a name="[387]"></a>lua_getuservalue</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lapi.o(i.lua_getuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_getuservalue &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
</UL>

<P><STRONG><a name="[38f]"></a>lua_iscfunction</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(i.lua_iscfunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_iscfunction &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
</UL>

<P><STRONG><a name="[285]"></a>lua_isinteger</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lapi.o(i.lua_isinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_isinteger &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
</UL>

<P><STRONG><a name="[465]"></a>lua_isnumber</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lapi.o(i.lua_isnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = lua_isnumber &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
</UL>

<P><STRONG><a name="[276]"></a>lua_isstring</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lapi.o(i.lua_isstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_isstring &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
</UL>

<P><STRONG><a name="[4a1]"></a>lua_isyieldable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ldo.o(i.lua_isyieldable))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yieldable
</UL>

<P><STRONG><a name="[4eb]"></a>lua_len</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lapi.o(i.lua_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lua_len &rArr; luaV_objlen &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
</UL>

<P><STRONG><a name="[49b]"></a>lua_load</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, lapi.o(i.lua_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_init
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[a4]"></a>lua_newstate</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lstate.o(i.lua_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = lua_newstate &rArr; close_state &rArr; luaF_close &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preinit_thread
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(i.makeseed)
</UL>
<P><STRONG><a name="[496]"></a>lua_newthread</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lstate.o(i.lua_newthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = lua_newthread &rArr; stack_init &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preinit_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
</UL>

<P><STRONG><a name="[455]"></a>lua_newuserdata</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lapi.o(i.lua_newuserdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824 + Unknown Stack Size
<LI>Call Chain = lua_newuserdata &rArr; luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
</UL>

<P><STRONG><a name="[407]"></a>lua_next</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lapi.o(i.lua_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856 + Unknown Stack Size
<LI>Call Chain = lua_next &rArr; luaH_next &rArr; findindex &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[377]"></a>lua_pcallk</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, lapi.o(i.lua_pcallk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = lua_pcallk &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
</UL>

<P><STRONG><a name="[2b7]"></a>lua_pushboolean</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lapi.o(i.lua_pushboolean))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setboolfield
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ult
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yieldable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_corunning
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsb
</UL>

<P><STRONG><a name="[2b8]"></a>lua_pushcclosure</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lapi.o(i.lua_pushcclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lua_pushcclosure &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
</UL>

<P><STRONG><a name="[321]"></a>lua_pushfstring</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lapi.o(i.lua_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msghandler
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[2b6]"></a>lua_pushinteger</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lapi.o(i.lua_pushinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_len
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setfield
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsi
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[28e]"></a>lua_pushlightuserdata</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_pushlightuserdata))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[275]"></a>lua_pushlstring</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lapi.o(i.lua_pushlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = lua_pushlstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnexttemplate
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
</UL>

<P><STRONG><a name="[2f5]"></a>lua_pushnil</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(i.lua_pushnil))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[498]"></a>lua_pushnumber</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lapi.o(i.lua_pushnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_pushnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[2c3]"></a>lua_pushstring</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lapi.o(i.lua_pushstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lua_pushstring &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmpname
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_setlocale
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_getenv
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eof
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_sym
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_load
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabss
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[37b]"></a>lua_pushthread</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lapi.o(i.lua_pushthread))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_corunning
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[270]"></a>lua_pushvalue</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(i.lua_pushvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_pushvalue &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getregistry
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[4e8]"></a>lua_pushvfstring</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lapi.o(i.lua_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = lua_pushvfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[405]"></a>lua_rawequal</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lapi.o(i.lua_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = lua_rawequal &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[315]"></a>lua_rawget</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lapi.o(i.lua_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = lua_rawget &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[411]"></a>lua_rawgeti</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lapi.o(i.lua_rawgeti))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lua_rawgeti &rArr; luaH_getint
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
</UL>

<P><STRONG><a name="[28d]"></a>lua_rawgetp</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lapi.o(i.lua_rawgetp))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = lua_rawgetp &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[49e]"></a>lua_rawlen</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lapi.o(i.lua_rawlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_rawlen &rArr; luaH_getn &rArr; unbound_search &rArr; luaH_getint
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
</UL>

<P><STRONG><a name="[389]"></a>lua_rawset</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lapi.o(i.lua_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = lua_rawset &rArr; luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[291]"></a>lua_rawseti</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lapi.o(i.lua_rawseti))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = lua_rawseti &rArr; luaH_setint &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
</UL>

<P><STRONG><a name="[36b]"></a>lua_rawsetp</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lapi.o(i.lua_rawsetp))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = lua_rawsetp &rArr; luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[2c6]"></a>lua_resume</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ldo.o(i.lua_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = lua_resume &rArr; recover &rArr; luaF_close &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_error
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[26c]"></a>lua_rotate</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lapi.o(i.lua_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lua_rotate &rArr; reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[28f]"></a>lua_setfield</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lapi.o(i.lua_setfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setfield
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setboolfield
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabss
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsi
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsb
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
</UL>

<P><STRONG><a name="[4f4]"></a>lua_setglobal</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lapi.o(i.lua_setglobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = lua_setglobal &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
</UL>

<P><STRONG><a name="[38a]"></a>lua_sethook</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ldebug.o(i.lua_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_sethook
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[51e]"></a>lua_seti</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lapi.o(i.lua_seti))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = lua_seti &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[38b]"></a>lua_setlocal</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ldebug.o(i.lua_setlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_setlocal &rArr; findlocal &rArr; findvararg
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapextra
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
</UL>

<P><STRONG><a name="[36a]"></a>lua_setmetatable</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lapi.o(i.lua_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lua_setmetatable &rArr; luaC_checkfinalizer &rArr; sweeptolive &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
</UL>

<P><STRONG><a name="[26d]"></a>lua_settop</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, lapi.o(i.lua_settop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getboolfield
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noenv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[2d4]"></a>lua_setupvalue</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lapi.o(i.lua_setupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lua_setupvalue &rArr; luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_upvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>

<P><STRONG><a name="[38c]"></a>lua_setuservalue</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lapi.o(i.lua_setuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lua_setuservalue &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
</UL>

<P><STRONG><a name="[2c4]"></a>lua_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lapi.o(i.lua_status))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[49f]"></a>lua_stringtonumber</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lapi.o(i.lua_stringtonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lua_stringtonumber &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
</UL>

<P><STRONG><a name="[274]"></a>lua_toboolean</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lapi.o(i.lua_toboolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_toboolean &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getboolfield
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noenv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>

<P><STRONG><a name="[288]"></a>lua_tointegerx</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lapi.o(i.lua_tointegerx))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = lua_tointegerx &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
</UL>

<P><STRONG><a name="[266]"></a>lua_tolstring</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lapi.o(i.lua_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = lua_tolstring &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msghandler
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[286]"></a>lua_tonumberx</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lapi.o(i.lua_tonumberx))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = lua_tonumberx &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
</UL>

<P><STRONG><a name="[4f6]"></a>lua_topointer</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lapi.o(i.lua_topointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_topointer &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[445]"></a>lua_tothread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lapi.o(i.lua_tothread))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_tothread &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
</UL>

<P><STRONG><a name="[312]"></a>lua_touserdata</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lapi.o(i.lua_touserdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_touserdata &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>

<P><STRONG><a name="[277]"></a>lua_type</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(i.lua_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_type &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msghandler
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[278]"></a>lua_typename</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lapi.o(i.lua_typename))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msghandler
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>

<P><STRONG><a name="[38e]"></a>lua_upvalueid</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lapi.o(i.lua_upvalueid))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_upvalueid &rArr; getupvalref &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalref
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[390]"></a>lua_upvaluejoin</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lapi.o(i.lua_upvaluejoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lua_upvaluejoin &rArr; luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvdeccount
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalref
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
</UL>

<P><STRONG><a name="[3df]"></a>lua_version</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_version))
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[2c5]"></a>lua_xmove</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, lapi.o(i.lua_xmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lua_xmove
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[4a0]"></a>lua_yieldk</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ldo.o(i.lua_yieldk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = lua_yieldk &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yield
</UL>

<P><STRONG><a name="[105]"></a>luaopen_base</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lbaselib.o(i.luaopen_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = luaopen_base &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>luaopen_coroutine</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcorolib.o(i.luaopen_coroutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = luaopen_coroutine &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>luaopen_debug</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ldblib.o(i.luaopen_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = luaopen_debug &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>luaopen_io</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, liolib.o(i.luaopen_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = luaopen_io &rArr; createmeta &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmeta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>luaopen_math</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lmathlib.o(i.luaopen_math))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = luaopen_math &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>luaopen_os</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, loslib.o(i.luaopen_os))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = luaopen_os &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>luaopen_package</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, loadlib.o(i.luaopen_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 6216 + Unknown Stack Size
<LI>Call Chain = luaopen_package &rArr; setpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createsearcherstable
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createclibstable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>luaopen_string</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lstrlib.o(i.luaopen_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = luaopen_string &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>luaopen_table</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ltablib.o(i.luaopen_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = luaopen_table &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>luaopen_utf8</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lutf8lib.o(i.luaopen_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = luaopen_utf8 &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>main</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3512 + Unknown Stack Size
<LI>Call Chain = main &rArr; test &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theTimerInit
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dostring
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[16]"></a>modbus_heart</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, modbus.o(i.modbus_heart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = modbus_heart &rArr; uip_process &rArr; uip_modbus_appcall &rArr; tcp_server_file &rArr; tcp_server_timedout &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>modbus_init</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, modbus.o(i.modbus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = modbus_init &rArr; eMBTCPInit &rArr; eMBTCPDoInit &rArr; xMBTCPPortInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPInit
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>modbus_loop</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, modbus.o(i.modbus_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = modbus_loop &rArr; uip_process &rArr; uip_modbus_appcall &rArr; tcp_server_file &rArr; tcp_server_timedout &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>modbus_set_coil</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modbus.o(i.modbus_set_coil))
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>modbus_set_input</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modbus.o(i.modbus_set_input))
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>modbus_task</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app.o(i.modbus_task))
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[19]"></a>modbus_up_coil</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, modbus.o(i.modbus_up_coil))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modbus_up_coil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>only_id_get_id</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, only_id.o(i.only_id_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = only_id_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[509]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
</UL>

<P><STRONG><a name="[3a8]"></a>prveMBError2Exception</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mbutils.o(i.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[574]"></a>pvPortMalloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[55f]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1b9]"></a>remove</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i.remove))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_remove
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[53f]"></a>rename</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i.rename))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rename
</UL>

<P><STRONG><a name="[530]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
</UL>

<P><STRONG><a name="[264]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[473]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2dloc
</UL>

<P><STRONG><a name="[53e]"></a>system</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i.system))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_execute
</UL>

<P><STRONG><a name="[531]"></a>tan</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tan.o(i.tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
</UL>

<P><STRONG><a name="[59d]"></a>tcp_server_aborted</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp_file.o(i.tcp_server_aborted))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tcp_server_aborted &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_file
</UL>

<P><STRONG><a name="[59e]"></a>tcp_server_acked</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp_file.o(i.tcp_server_acked))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tcp_server_acked &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_file
</UL>

<P><STRONG><a name="[59f]"></a>tcp_server_closed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp_file.o(i.tcp_server_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tcp_server_closed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_file
</UL>

<P><STRONG><a name="[5a0]"></a>tcp_server_connected</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp_file.o(i.tcp_server_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tcp_server_connected &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_file
</UL>

<P><STRONG><a name="[5a1]"></a>tcp_server_file</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, tcp_file.o(i.tcp_server_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tcp_server_file &rArr; tcp_server_timedout &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_timedout
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_senddata
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_connected
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_closed
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_acked
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_aborted
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_modbus_appcall
</UL>

<P><STRONG><a name="[5a3]"></a>tcp_server_senddata</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp_file.o(i.tcp_server_senddata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_server_senddata &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_file
</UL>

<P><STRONG><a name="[5a2]"></a>tcp_server_timedout</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp_file.o(i.tcp_server_timedout))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tcp_server_timedout &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_file
</UL>

<P><STRONG><a name="[521]"></a>test</STRONG> (Thumb, 328 bytes, Stack size 3192 bytes, app.o(i.test))
<BR><BR>[Stack]<UL><LI>Max Depth = 3496 + Unknown Stack Size
<LI>Call Chain = test &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>theTimerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(i.theTimerCallback))
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.theTimerInit)
</UL>
<P><STRONG><a name="[523]"></a>theTimerInit</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app.o(i.theTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = theTimerInit &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46f]"></a>time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(i.time))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_randomizePivot
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
</UL>

<P><STRONG><a name="[85]"></a>ubasic_task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app.o(i.ubasic_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ubasic_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.can_up_task)
</UL>
<P><STRONG><a name="[5a9]"></a>uip_add32</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, uip.o(i.uip_add32))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>

<P><STRONG><a name="[536]"></a>uip_arp_arpin</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, uip_arp.o(i.uip_arp_arpin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_arp_arpin &rArr; uip_arp_update
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
</UL>

<P><STRONG><a name="[533]"></a>uip_arp_out</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, uip_arp.o(i.uip_arp_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = uip_arp_out
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_heart
</UL>

<P><STRONG><a name="[5ab]"></a>uip_ipchksum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uip.o(i.uip_ipchksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uip_ipchksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[522]"></a>uip_listen</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uip.o(i.uip_listen))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortInit
</UL>

<P><STRONG><a name="[5ad]"></a>uip_modbus_appcall</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, porttcp.o(i.uip_modbus_appcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = uip_modbus_appcall &rArr; tcp_server_file &rArr; tcp_server_timedout &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_file
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[532]"></a>uip_process</STRONG> (Thumb, 3634 bytes, Stack size 16 bytes, uip.o(i.uip_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = uip_process &rArr; uip_modbus_appcall &rArr; tcp_server_file &rArr; tcp_server_timedout &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_modbus_appcall
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_loop
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_heart
</UL>

<P><STRONG><a name="[5a4]"></a>uip_send</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uip.o(i.uip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_senddata
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_modbus_appcall
</UL>

<P><STRONG><a name="[5ae]"></a>uip_tcpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip.o(i.uip_tcpchksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_tcpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[d]"></a>usart_init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>usart_sen_byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart.o(i.usart_sen_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_sen_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.data)
</UL>
<P><STRONG><a name="[54a]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list_1.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[552]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list_1.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[55e]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list_1.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>

<P><STRONG><a name="[54c]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list_1.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[54b]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list_1.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[3b5]"></a>vMBTCPPortDisable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, porttcp.o(i.vMBTCPPortDisable))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPStop
</UL>

<P><STRONG><a name="[54e]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[550]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[55a]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[5be]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[56a]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[2f9]"></a>vTaskDelay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ubasic_task
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_task
</UL>

<P><STRONG><a name="[2fa]"></a>vTaskDelete</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_up_task
</UL>

<P><STRONG><a name="[570]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[5b4]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[5b2]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[5c0]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[524]"></a>vTaskStartScheduler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[555]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[181]"></a>vTaskSwitchContext</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[25]"></a>w25qxx_erase_chip</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, w25qxx.o(i.w25qxx_erase_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = w25qxx_erase_chip &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_send_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diskio.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>w25qxx_erase_sector</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, w25qxx.o(i.w25qxx_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = w25qxx_erase_sector &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_send_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diskio.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>w25qxx_get_id</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, w25qxx.o(i.w25qxx_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = w25qxx_get_id &rArr; w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_send_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diskio.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>w25qxx_init</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, w25qxx.o(i.w25qxx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = w25qxx_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diskio.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>w25qxx_power_down</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, w25qxx.o(i.w25qxx_power_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w25qxx_power_down &rArr; w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_send_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diskio.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>w25qxx_read</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, w25qxx.o(i.w25qxx_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = w25qxx_read &rArr; w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_send_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diskio.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>w25qxx_wake_up</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, w25qxx.o(i.w25qxx_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w25qxx_wake_up &rArr; w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_send_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diskio.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>w25qxx_write</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, w25qxx.o(i.w25qxx_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = w25qxx_write &rArr; w25qxx_write_nocheck &rArr; w25qxx_wait_page &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_nocheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diskio.o(.data)
</UL>
<P><STRONG><a name="[3ad]"></a>xMBPortEventGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[3b2]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPInit
</UL>

<P><STRONG><a name="[3ae]"></a>xMBPortEventPost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_modbus_appcall
</UL>

<P><STRONG><a name="[3b3]"></a>xMBTCPPortGetRequest</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, porttcp.o(i.xMBTCPPortGetRequest))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPReceive
</UL>

<P><STRONG><a name="[3b0]"></a>xMBTCPPortInit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, porttcp.o(i.xMBTCPPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBTCPPortInit
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPDoInit
</UL>

<P><STRONG><a name="[3b4]"></a>xMBTCPPortSendResponse</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, porttcp.o(i.xMBTCPPortSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBTCPPortSendResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPSend
</UL>

<P><STRONG><a name="[5b6]"></a>xPortStartScheduler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[553]"></a>xQueueGenericCreate</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[568]"></a>xQueueGenericReceive</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[55c]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[5c2]"></a>xQueueGenericSend</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[5c3]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[5c1]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2fb]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_up_task
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[5c4]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[56b]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theTimerInit
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[246]"></a>xTaskIncrementTick</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[56f]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[556]"></a>xTaskResumeAll</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[5a5]"></a>xTimerCreate</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theTimerInit
</UL>

<P><STRONG><a name="[5b5]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[565]"></a>xTimerGenericCommand</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theTimerInit
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[7b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[168]"></a>_get_lc_collate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_collate_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_collate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_collate_2
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[16f]"></a>_get_lc_time</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_time_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_time_2
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[16b]"></a>_get_lc_monetary</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_monetary_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_monetary
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_monetary_2
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[16d]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[261]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[5c5]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[24d]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[5c8]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[5cb]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[5cf]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[259]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[5cd]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[5ce]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[24f]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[5d0]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[250]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[620]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[22b]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
</UL>

<P><STRONG><a name="[621]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[252]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_clock
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
</UL>

<P><STRONG><a name="[622]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[22c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[5d1]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[5d4]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[24e]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[5d2]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[5c7]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[41d]"></a>_drem</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, drem_clz.o(x$fpl$drem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drem &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>

<P><STRONG><a name="[5ca]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[5d3]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[251]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[5d5]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[593]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[24c]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[5d7]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[59a]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[5d8]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[5d9]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[5c6]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[22a]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
</UL>

<P><STRONG><a name="[5da]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[144]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[148]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[5cc]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[253]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[1e9]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[200]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1ff]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[5db]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3a2]"></a>docall</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, app.o(i.docall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = docall &rArr; lua_pcallk &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dochunk
</UL>

<P><STRONG><a name="[3a3]"></a>dochunk</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app.o(i.dochunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448 + Unknown Stack Size
<LI>Call Chain = dochunk &rArr; docall &rArr; lua_pcallk &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dostring
</UL>

<P><STRONG><a name="[3a5]"></a>dostring</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, app.o(i.dostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104 + Unknown Stack Size
<LI>Call Chain = dostring &rArr; luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dochunk
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>msghandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, app.o(i.msghandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072 + Unknown Stack Size
<LI>Call Chain = msghandler &rArr; luaL_traceback &rArr; pushfuncname &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.docall)
</UL>
<P><STRONG><a name="[3a4]"></a>report</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app.o(i.report))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = report &rArr; lua_tolstring &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dochunk
</UL>

<P><STRONG><a name="[5bb]"></a>w25qxx_read_sr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, w25qxx.o(i.w25qxx_read_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w25qxx_read_sr &rArr; w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
</UL>

<P><STRONG><a name="[5ba]"></a>w25qxx_send_byte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, w25qxx.o(i.w25qxx_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wake_up
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_power_down
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_get_id
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_chip
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_page
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_sr
</UL>

<P><STRONG><a name="[5b9]"></a>w25qxx_wait_busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w25qxx.o(i.w25qxx_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_sr
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_chip
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_page
</UL>

<P><STRONG><a name="[5bc]"></a>w25qxx_wait_page</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, w25qxx.o(i.w25qxx_wait_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = w25qxx_wait_page &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_busy
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_nocheck
</UL>

<P><STRONG><a name="[5b8]"></a>w25qxx_write_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, w25qxx.o(i.w25qxx_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w25qxx_write_enable &rArr; w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_sector
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_erase_chip
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_page
</UL>

<P><STRONG><a name="[5bd]"></a>w25qxx_write_nocheck</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, w25qxx.o(i.w25qxx_write_nocheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = w25qxx_write_nocheck &rArr; w25qxx_wait_page &rArr; w25qxx_wait_busy &rArr; w25qxx_read_sr &rArr; w25qxx_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_wait_page
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write
</UL>

<P><STRONG><a name="[228]"></a>LEintfloat</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lvm.o(i.LEintfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEintfloat &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
</UL>

<P><STRONG><a name="[22d]"></a>LEnum</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lvm.o(i.LEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LEnum &rArr; LTintfloat &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[22f]"></a>LTintfloat</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, lvm.o(i.LTintfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LTintfloat &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
</UL>

<P><STRONG><a name="[230]"></a>LTnum</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lvm.o(i.LTnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LTnum &rArr; LTintfloat &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
</UL>

<P><STRONG><a name="[35b]"></a>copy2buff</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lvm.o(i.copy2buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copy2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>

<P><STRONG><a name="[41f]"></a>forlimit</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lvm.o(i.forlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = forlimit &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[50d]"></a>getcached</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, lvm.o(i.getcached))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getcached
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[476]"></a>l_strcmp</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lvm.o(i.l_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = l_strcmp &rArr; strcoll
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[50e]"></a>pushclosure</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, lvm.o(i.pushclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pushclosure &rArr; luaF_newLclosure &rArr; luaC_newobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[ac]"></a>byteoffset</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, lutf8lib.o(i.byteoffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = byteoffset &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>codepoint</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, lutf8lib.o(i.codepoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184 + Unknown Stack Size
<LI>Call Chain = codepoint &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_decode
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>iter_aux</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lutf8lib.o(i.iter_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = iter_aux &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(i.iter_codes)
</UL>
<P><STRONG><a name="[b0]"></a>iter_codes</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lutf8lib.o(i.iter_codes))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104 + Unknown Stack Size
<LI>Call Chain = iter_codes &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[573]"></a>pushutfchar</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lutf8lib.o(i.pushutfchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = pushutfchar &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
</UL>

<P><STRONG><a name="[2f4]"></a>u_posrelat</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lutf8lib.o(i.u_posrelat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u_posrelat
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
</UL>

<P><STRONG><a name="[347]"></a>utf8_decode</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, lutf8lib.o(i.utf8_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = utf8_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
</UL>

<P><STRONG><a name="[ae]"></a>utfchar</STRONG> (Thumb, 78 bytes, Stack size 4176 bytes, lutf8lib.o(i.utfchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 6312 + Unknown Stack Size
<LI>Call Chain = utfchar &rArr; pushutfchar &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>utflen</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, lutf8lib.o(i.utflen))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192 + Unknown Stack Size
<LI>Call Chain = utflen &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_decode
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[231]"></a>LoadBlock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lundump.o(i.LoadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888 + Unknown Stack Size
<LI>Call Chain = LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNumber
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInteger
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>

<P><STRONG><a name="[234]"></a>LoadByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lundump.o(i.LoadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = LoadByte &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[235]"></a>LoadCode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lundump.o(i.LoadCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = LoadCode &rArr; LoadInt &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[239]"></a>LoadConstants</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, lundump.o(i.LoadConstants))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000 + Unknown Stack Size
<LI>Call Chain = LoadConstants &rArr; LoadString &rArr; LoadByte &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNumber
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInteger
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[23d]"></a>LoadDebug</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lundump.o(i.LoadDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = LoadDebug &rArr; LoadString &rArr; LoadByte &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[23e]"></a>LoadFunction</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lundump.o(i.LoadFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = LoadFunction &rArr; LoadConstants &rArr; LoadString &rArr; LoadByte &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
</UL>

<P><STRONG><a name="[236]"></a>LoadInt</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lundump.o(i.LoadInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = LoadInt &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCode
</UL>

<P><STRONG><a name="[23b]"></a>LoadInteger</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lundump.o(i.LoadInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = LoadInteger &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[23a]"></a>LoadNumber</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lundump.o(i.LoadNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = LoadNumber &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[240]"></a>LoadProtos</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lundump.o(i.LoadProtos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = LoadProtos &rArr;  LoadFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[23c]"></a>LoadString</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, lundump.o(i.LoadString))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = LoadString &rArr; LoadByte &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[23f]"></a>LoadUpvalues</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lundump.o(i.LoadUpvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = LoadUpvalues &rArr; LoadInt &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[300]"></a>checkHeader</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lundump.o(i.checkHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944 + Unknown Stack Size
<LI>Call Chain = checkHeader &rArr; fchecksize &rArr; LoadByte &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNumber
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInteger
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
</UL>

<P><STRONG><a name="[301]"></a>checkliteral</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lundump.o(i.checkliteral))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = checkliteral &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[233]"></a>error</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lundump.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872 + Unknown Stack Size
<LI>Call Chain = error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>

<P><STRONG><a name="[302]"></a>fchecksize</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lundump.o(i.fchecksize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = fchecksize &rArr; LoadByte &rArr; LoadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[279]"></a>addfield</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ltablib.o(i.addfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
<LI>Call Chain = addfield &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
</UL>

<P><STRONG><a name="[2ca]"></a>auxsort</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, ltablib.o(i.auxsort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = auxsort &rArr;  auxsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_randomizePivot
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choosePivot
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[314]"></a>checkfield</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ltablib.o(i.checkfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = checkfield &rArr; lua_rawget &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>

<P><STRONG><a name="[325]"></a>checktab</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ltablib.o(i.checktab))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = checktab &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
</UL>

<P><STRONG><a name="[2cd]"></a>choosePivot</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ltablib.o(i.choosePivot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = choosePivot
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[2cf]"></a>l_randomizePivot</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, ltablib.o(i.l_randomizePivot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l_randomizePivot
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[b3]"></a>pack</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ltablib.o(i.pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = pack &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[2ce]"></a>partition</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ltablib.o(i.partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888 + Unknown Stack Size
<LI>Call Chain = partition &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[2cc]"></a>set2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ltablib.o(i.set2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = set2 &rArr; lua_seti &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[b7]"></a>sort</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ltablib.o(i.sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128 + Unknown Stack Size
<LI>Call Chain = sort &rArr; checktab &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[2cb]"></a>sort_comp</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ltablib.o(i.sort_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = sort_comp &rArr; lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[b1]"></a>tconcat</STRONG> (Thumb, 164 bytes, Stack size 4192 bytes, ltablib.o(i.tconcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 6328 + Unknown Stack Size
<LI>Call Chain = tconcat &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>tinsert</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ltablib.o(i.tinsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = tinsert &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>tmove</STRONG> (Thumb, 398 bytes, Stack size 64 bytes, ltablib.o(i.tmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = tmove &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>tremove</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ltablib.o(i.tremove))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + Unknown Stack Size
<LI>Call Chain = tremove &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>unpack</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ltablib.o(i.unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + Unknown Stack Size
<LI>Call Chain = unpack &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[35e]"></a>arrayindex</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ltable.o(i.arrayindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>

<P><STRONG><a name="[582]"></a>computesizes</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, ltable.o(i.computesizes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = computesizes
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[35d]"></a>countint</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ltable.o(i.countint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = countint &rArr; arrayindex
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numusehash
</UL>

<P><STRONG><a name="[40a]"></a>findindex</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ltable.o(i.findindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808 + Unknown Stack Size
<LI>Call Chain = findindex &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
</UL>

<P><STRONG><a name="[4d4]"></a>getfreepos</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ltable.o(i.getfreepos))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[449]"></a>getgeneric</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ltable.o(i.getgeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = getgeneric &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
</UL>

<P><STRONG><a name="[46d]"></a>l_hashfloat</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ltable.o(i.l_hashfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = l_hashfloat &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>

<P><STRONG><a name="[40b]"></a>mainposition</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, ltable.o(i.mainposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mainposition &rArr; l_hashfloat &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hashlongstr
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[581]"></a>numusearray</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ltable.o(i.numusearray))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = numusearray
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[53c]"></a>numusehash</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ltable.o(i.numusehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = numusehash &rArr; countint &rArr; arrayindex
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[4d5]"></a>rehash</STRONG> (Thumb, 98 bytes, Stack size 160 bytes, ltable.o(i.rehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = rehash &rArr; luaH_resize &rArr;  luaH_setint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numusehash
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numusearray
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computesizes
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[4d7]"></a>setarrayvector</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ltable.o(i.setarrayvector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = setarrayvector &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>

<P><STRONG><a name="[4d2]"></a>setnodevector</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ltable.o(i.setnodevector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = setnodevector &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>

<P><STRONG><a name="[4d1]"></a>unbound_search</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, ltable.o(i.unbound_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = unbound_search &rArr; luaH_getint
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
</UL>

<P><STRONG><a name="[265]"></a>add_s</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lstrlib.o(i.add_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
<LI>Call Chain = add_s &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[26f]"></a>add_value</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, lstrlib.o(i.add_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064 + Unknown Stack Size
<LI>Call Chain = add_value &rArr; add_s &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[280]"></a>addlenmod</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lstrlib.o(i.addlenmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = addlenmod &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[283]"></a>addliteral</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, lstrlib.o(i.addliteral))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064 + Unknown Stack Size
<LI>Call Chain = addliteral &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkdp
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[284]"></a>addquoted</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, lstrlib.o(i.addquoted))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = addquoted &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[2fc]"></a>capture_to_close</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lstrlib.o(i.capture_to_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = capture_to_close &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_capture
</UL>

<P><STRONG><a name="[305]"></a>check_capture</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lstrlib.o(i.check_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = check_capture &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_capture
</UL>

<P><STRONG><a name="[287]"></a>checkdp</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lstrlib.o(i.checkdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = checkdp &rArr; localeconv &rArr; _get_lconv
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[328]"></a>classend</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lstrlib.o(i.classend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = classend &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[598]"></a>copywithendian</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lstrlib.o(i.copywithendian))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = copywithendian
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[36f]"></a>createmetatable</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lstrlib.o(i.createmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = createmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
</UL>

<P><STRONG><a name="[44e]"></a>digit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lstrlib.o(i.digit))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>

<P><STRONG><a name="[3c2]"></a>end_capture</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lstrlib.o(i.end_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = end_capture &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_to_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[446]"></a>getdetails</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lstrlib.o(i.getdetails))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048 + Unknown Stack Size
<LI>Call Chain = getdetails &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[44d]"></a>getnum</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lstrlib.o(i.getnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getnum
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
</UL>

<P><STRONG><a name="[44f]"></a>getnumlimit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lstrlib.o(i.getnumlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888 + Unknown Stack Size
<LI>Call Chain = getnumlimit &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
</UL>

<P><STRONG><a name="[447]"></a>getoption</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, lstrlib.o(i.getoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = getoption &rArr; getnumlimit &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
</UL>

<P><STRONG><a name="[bd]"></a>gmatch</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, lstrlib.o(i.gmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = gmatch &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>gmatch_aux</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lstrlib.o(i.gmatch_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952 + Unknown Stack Size
<LI>Call Chain = gmatch_aux &rArr; match &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reprepstate
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(i.gmatch)
</UL>
<P><STRONG><a name="[597]"></a>initheader</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lstrlib.o(i.initheader))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[489]"></a>lmemfind</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lstrlib.o(i.lmemfind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lmemfind &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[3c3]"></a>match</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, lstrlib.o(i.match))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = match &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_expand
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbalance
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_capture
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_capture
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classend
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_expand
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_capture
</UL>

<P><STRONG><a name="[529]"></a>match_capture</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lstrlib.o(i.match_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = match_capture &rArr; check_capture &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_capture
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[52d]"></a>match_class</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, lstrlib.o(i.match_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = match_class &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
</UL>

<P><STRONG><a name="[527]"></a>matchbalance</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lstrlib.o(i.matchbalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888 + Unknown Stack Size
<LI>Call Chain = matchbalance &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[528]"></a>matchbracketclass</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lstrlib.o(i.matchbracketclass))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = matchbracketclass &rArr; match_class &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[52b]"></a>max_expand</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lstrlib.o(i.max_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = max_expand &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[52c]"></a>min_expand</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lstrlib.o(i.min_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = min_expand &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[53b]"></a>nospecials</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lstrlib.o(i.nospecials))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nospecials &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[540]"></a>packint</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lstrlib.o(i.packint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = packint &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[595]"></a>posrelat</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lstrlib.o(i.posrelat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = posrelat
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
</UL>

<P><STRONG><a name="[456]"></a>prepstate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lstrlib.o(i.prepstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prepstate
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[271]"></a>push_captures</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lstrlib.o(i.push_captures))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = push_captures &rArr; push_onecapture &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[26a]"></a>push_onecapture</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lstrlib.o(i.push_onecapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = push_onecapture &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[457]"></a>reprepstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lstrlib.o(i.reprepstate))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
</UL>

<P><STRONG><a name="[587]"></a>scanformat</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lstrlib.o(i.scanformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888 + Unknown Stack Size
<LI>Call Chain = scanformat &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[52a]"></a>singlematch</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lstrlib.o(i.singlematch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = singlematch &rArr; matchbracketclass &rArr; match_class &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_expand
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[526]"></a>start_capture</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lstrlib.o(i.start_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = start_capture &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[b8]"></a>str_byte</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, lstrlib.o(i.str_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184 + Unknown Stack Size
<LI>Call Chain = str_byte &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>str_char</STRONG> (Thumb, 94 bytes, Stack size 4192 bytes, lstrlib.o(i.str_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 6304 + Unknown Stack Size
<LI>Call Chain = str_char &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>str_dump</STRONG> (Thumb, 82 bytes, Stack size 4176 bytes, lstrlib.o(i.str_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 6264 + Unknown Stack Size
<LI>Call Chain = str_dump &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_dump
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>str_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lstrlib.o(i.str_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488 + Unknown Stack Size
<LI>Call Chain = str_find &rArr; str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[596]"></a>str_find_aux</STRONG> (Thumb, 370 bytes, Stack size 344 bytes, lstrlib.o(i.str_find_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480 + Unknown Stack Size
<LI>Call Chain = str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reprepstate
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nospecials
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmemfind
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_match
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find
</UL>

<P><STRONG><a name="[bc]"></a>str_format</STRONG> (Thumb, 648 bytes, Stack size 4200 bytes, lstrlib.o(i.str_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 6312 + Unknown Stack Size
<LI>Call Chain = str_format &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>str_gsub</STRONG> (Thumb, 444 bytes, Stack size 4456 bytes, lstrlib.o(i.str_gsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 6592 + Unknown Stack Size
<LI>Call Chain = str_gsub &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reprepstate
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>str_len</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lstrlib.o(i.str_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = str_len &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>str_lower</STRONG> (Thumb, 88 bytes, Stack size 4184 bytes, lstrlib.o(i.str_lower))
<BR><BR>[Stack]<UL><LI>Max Depth = 6280 + Unknown Stack Size
<LI>Call Chain = str_lower &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>str_match</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lstrlib.o(i.str_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488 + Unknown Stack Size
<LI>Call Chain = str_match &rArr; str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>str_pack</STRONG> (Thumb, 846 bytes, Stack size 4272 bytes, lstrlib.o(i.str_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 6384 + Unknown Stack Size
<LI>Call Chain = str_pack &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packint
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copywithendian
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>str_packsize</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, lstrlib.o(i.str_packsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
<LI>Call Chain = str_packsize &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>str_rep</STRONG> (Thumb, 280 bytes, Stack size 4192 bytes, lstrlib.o(i.str_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 6312 + Unknown Stack Size
<LI>Call Chain = str_rep &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>str_reverse</STRONG> (Thumb, 94 bytes, Stack size 4184 bytes, lstrlib.o(i.str_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 6280 + Unknown Stack Size
<LI>Call Chain = str_reverse &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>str_sub</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, lstrlib.o(i.str_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = str_sub &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>str_unpack</STRONG> (Thumb, 420 bytes, Stack size 104 bytes, lstrlib.o(i.str_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240 + Unknown Stack Size
<LI>Call Chain = str_unpack &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copywithendian
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>str_upper</STRONG> (Thumb, 88 bytes, Stack size 4184 bytes, lstrlib.o(i.str_upper))
<BR><BR>[Stack]<UL><LI>Max Depth = 6280 + Unknown Stack Size
<LI>Call Chain = str_upper &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[599]"></a>unpackint</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, lstrlib.o(i.unpackint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = unpackint &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[a8]"></a>writer</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lstrlib.o(i.writer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = writer &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(i.str_dump)
</UL>
<P><STRONG><a name="[373]"></a>createstrobj</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lstring.o(i.createstrobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = createstrobj &rArr; luaC_newobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
</UL>

<P><STRONG><a name="[462]"></a>internshrstr</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lstring.o(i.internshrstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>

<P><STRONG><a name="[32d]"></a>close_state</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lstate.o(i.close_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = close_state &rArr; luaF_close &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[9d]"></a>f_luaopen</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lstate.o(i.f_luaopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = f_luaopen &rArr; stack_init &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_version
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(i.lua_newstate)
</UL>
<P><STRONG><a name="[330]"></a>freestack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lstate.o(i.freestack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = freestack &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[3db]"></a>init_registry</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, lstate.o(i.init_registry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = init_registry &rArr; luaH_setint &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[51a]"></a>makeseed</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lstate.o(i.makeseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = makeseed &rArr; luaS_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[519]"></a>preinit_thread</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lstate.o(i.preinit_thread))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[3da]"></a>stack_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lstate.o(i.stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = stack_init &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[28a]"></a>addprototype</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, lparser.o(i.addprototype))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = addprototype &rArr; luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[292]"></a>adjust_assign</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lparser.o(i.adjust_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + Unknown Stack Size
<LI>Call Chain = adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[297]"></a>adjustlocalvars</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lparser.o(i.adjustlocalvars))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adjustlocalvars &rArr; getlocvar
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[29a]"></a>assignment</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, lparser.o(i.assignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 2560 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = assignment &rArr;  assignment (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[2d7]"></a>block</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, lparser.o(i.block))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[479]"></a>block_follow</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lparser.o(i.block_follow))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[2db]"></a>body</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, lparser.o(i.body))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = body &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
</UL>

<P><STRONG><a name="[2e4]"></a>breaklabel</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lparser.o(i.breaklabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080 + Unknown Stack Size
<LI>Call Chain = breaklabel &rArr; findgotos &rArr; closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[2fe]"></a>check</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lparser.o(i.check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
<LI>Call Chain = check &rArr; error_expected &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>

<P><STRONG><a name="[29e]"></a>check_conflict</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, lparser.o(i.check_conflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = check_conflict &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[2df]"></a>check_match</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, lparser.o(i.check_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080 + Unknown Stack Size
<LI>Call Chain = check_match &rArr; testnext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[29f]"></a>checklimit</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lparser.o(i.checklimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = checklimit &rArr; errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterlevel
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[31b]"></a>checkname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lparser.o(i.checkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = checkname &rArr; str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[2a0]"></a>checknext</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lparser.o(i.checknext))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = checknext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[322]"></a>checkrepeated</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lparser.o(i.checkrepeated))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
<LI>Call Chain = checkrepeated &rArr; semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semerror
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[2e1]"></a>close_func</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, lparser.o(i.close_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = close_func &rArr; leaveblock &rArr; movegotosout &rArr; findlabel &rArr; closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[331]"></a>closegoto</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, lparser.o(i.closegoto))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semerror
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
</UL>

<P><STRONG><a name="[333]"></a>closelistfield</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lparser.o(i.closelistfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = closelistfield &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[2e0]"></a>codeclosure</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lparser.o(i.codeclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160 + Unknown Stack Size
<LI>Call Chain = codeclosure &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[31d]"></a>codestring</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lparser.o(i.codestring))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = codestring &rArr; luaK_stringK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>

<P><STRONG><a name="[34e]"></a>cond</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lparser.o(i.cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 2616 + Unknown Stack Size
<LI>Call Chain = cond &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
</UL>

<P><STRONG><a name="[356]"></a>constructor</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, lparser.o(i.constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368 + Unknown Stack Size
<LI>Call Chain = constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_int2fb
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closelistfield
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
</UL>

<P><STRONG><a name="[2d8]"></a>enterblock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lparser.o(i.enterblock))
<BR><BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[3c4]"></a>enterlevel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lparser.o(i.enterlevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = enterlevel &rArr; checklimit &rArr; errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[2ff]"></a>error_expected</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lparser.o(i.error_expected))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = error_expected &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>

<P><STRONG><a name="[316]"></a>errorlimit</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, lparser.o(i.errorlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
<LI>Call Chain = errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>

<P><STRONG><a name="[3cc]"></a>exp1</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, lparser.o(i.exp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 2624 + Unknown Stack Size
<LI>Call Chain = exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[2a1]"></a>explist</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lparser.o(i.explist))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = explist &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[34f]"></a>expr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lparser.o(i.expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 2584 + Unknown Stack Size
<LI>Call Chain = expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
</UL>

<P><STRONG><a name="[3d2]"></a>exprstat</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, lparser.o(i.exprstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2608 + Unknown Stack Size
<LI>Call Chain = exprstat &rArr; assignment &rArr;  assignment (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[357]"></a>field</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lparser.o(i.field))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296 + Unknown Stack Size
<LI>Call Chain = field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[400]"></a>fieldsel</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, lparser.o(i.fieldsel))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + Unknown Stack Size
<LI>Call Chain = fieldsel &rArr; luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcname
</UL>

<P><STRONG><a name="[2e6]"></a>findgotos</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lparser.o(i.findgotos))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = findgotos &rArr; closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breaklabel
</UL>

<P><STRONG><a name="[40d]"></a>findlabel</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lparser.o(i.findlabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064 + Unknown Stack Size
<LI>Call Chain = findlabel &rArr; closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movegotosout
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
</UL>

<P><STRONG><a name="[41e]"></a>forbody</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, lparser.o(i.forbody))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200 + Unknown Stack Size
<LI>Call Chain = forbody &rArr; block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[422]"></a>forlist</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, lparser.o(i.forlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264 + Unknown Stack Size
<LI>Call Chain = forlist &rArr; forbody &rArr; block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
</UL>

<P><STRONG><a name="[425]"></a>fornum</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lparser.o(i.fornum))
<BR><BR>[Stack]<UL><LI>Max Depth = 2656 + Unknown Stack Size
<LI>Call Chain = fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
</UL>

<P><STRONG><a name="[426]"></a>forstat</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lparser.o(i.forstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2696 + Unknown Stack Size
<LI>Call Chain = forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[431]"></a>funcargs</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, lparser.o(i.funcargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 2432 + Unknown Stack Size
<LI>Call Chain = funcargs &rArr; constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[433]"></a>funcname</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lparser.o(i.funcname))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272 + Unknown Stack Size
<LI>Call Chain = funcname &rArr; singlevar &rArr; luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
</UL>

<P><STRONG><a name="[437]"></a>funcstat</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, lparser.o(i.funcstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + Unknown Stack Size
<LI>Call Chain = funcstat &rArr; funcname &rArr; singlevar &rArr; luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcname
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[59c]"></a>getbinopr</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, lparser.o(i.getbinopr))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[298]"></a>getlocvar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lparser.o(i.getlocvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchvar
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevars
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>

<P><STRONG><a name="[59b]"></a>getunopr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lparser.o(i.getunopr))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[458]"></a>gotostat</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lparser.o(i.gotostat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = gotostat &rArr; findlabel &rArr; closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[45a]"></a>ifstat</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lparser.o(i.ifstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2672 + Unknown Stack Size
<LI>Call Chain = ifstat &rArr; test_then_block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[2a4]"></a>init_exp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lparser.o(i.init_exp))
<BR><BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[477]"></a>labelstat</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lparser.o(i.labelstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = labelstat &rArr; findgotos &rArr; closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipnoopstat
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[358]"></a>lastlistfield</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lparser.o(i.lastlistfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = lastlistfield &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[2da]"></a>leaveblock</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lparser.o(i.leaveblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = leaveblock &rArr; movegotosout &rArr; findlabel &rArr; closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevars
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movegotosout
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breaklabel
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[3fe]"></a>listfield</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lparser.o(i.listfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = listfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[48d]"></a>localfunc</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lparser.o(i.localfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288 + Unknown Stack Size
<LI>Call Chain = localfunc &rArr; body &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[48e]"></a>localstat</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, lparser.o(i.localstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216 + Unknown Stack Size
<LI>Call Chain = localstat &rArr; adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[512]"></a>mainfunc</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, lparser.o(i.mainfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2776 + Unknown Stack Size
<LI>Call Chain = mainfunc &rArr; statlist &rArr; statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[58f]"></a>markupval</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lparser.o(i.markupval))
<BR><BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[47c]"></a>movegotosout</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lparser.o(i.movegotosout))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + Unknown Stack Size
<LI>Call Chain = movegotosout &rArr; findlabel &rArr; closegoto &rArr; luaK_patchlist &rArr; luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[423]"></a>new_localvar</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lparser.o(i.new_localvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992 + Unknown Stack Size
<LI>Call Chain = new_localvar &rArr; registerlocalvar &rArr; luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[2dd]"></a>new_localvarliteral_</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lparser.o(i.new_localvarliteral_))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = new_localvarliteral_ &rArr; new_localvar &rArr; registerlocalvar &rArr; luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[2e5]"></a>newlabelentry</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, lparser.o(i.newlabelentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = newlabelentry &rArr; luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breaklabel
</UL>

<P><STRONG><a name="[525]"></a>newupvalue</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, lparser.o(i.newupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992 + Unknown Stack Size
<LI>Call Chain = newupvalue &rArr; checklimit &rArr; errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
</UL>

<P><STRONG><a name="[2dc]"></a>open_func</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lparser.o(i.open_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = open_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[2de]"></a>parlist</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lparser.o(i.parlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064 + Unknown Stack Size
<LI>Call Chain = parlist &rArr; testnext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[542]"></a>primaryexp</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lparser.o(i.primaryexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = primaryexp &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[3ff]"></a>recfield</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, lparser.o(i.recfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[538]"></a>registerlocalvar</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lparser.o(i.registerlocalvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = registerlocalvar &rArr; luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
</UL>

<P><STRONG><a name="[47b]"></a>removevars</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lparser.o(i.removevars))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = removevars &rArr; getlocvar
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[583]"></a>repeatstat</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, lparser.o(i.repeatstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2672 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[586]"></a>retstat</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, lparser.o(i.retstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2200 + Unknown Stack Size
<LI>Call Chain = retstat &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[590]"></a>searchupvalue</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lparser.o(i.searchupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = searchupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[588]"></a>searchvar</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lparser.o(i.searchvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = searchvar &rArr; getlocvar
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[323]"></a>semerror</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lparser.o(i.semerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
</UL>

<P><STRONG><a name="[58c]"></a>simpleexp</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, lparser.o(i.simpleexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2504 + Unknown Stack Size
<LI>Call Chain = simpleexp &rArr; suffixedexp &rArr; funcargs &rArr; constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[434]"></a>singlevar</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, lparser.o(i.singlevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256 + Unknown Stack Size
<LI>Call Chain = singlevar &rArr; luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcname
</UL>

<P><STRONG><a name="[58e]"></a>singlevaraux</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lparser.o(i.singlevaraux))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = singlevaraux &rArr;  singlevaraux (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchvar
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchupvalue
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markupval
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
</UL>

<P><STRONG><a name="[478]"></a>skipnoopstat</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lparser.o(i.skipnoopstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = skipnoopstat &rArr;  statement (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[592]"></a>statement</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, lparser.o(i.statement))
<BR><BR>[Stack]<UL><LI>Max Depth = 2712 + Unknown Stack Size
<LI>Call Chain = statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterlevel
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipnoopstat
</UL>

<P><STRONG><a name="[2d9]"></a>statlist</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lparser.o(i.statlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 2720 + Unknown Stack Size
<LI>Call Chain = statlist &rArr; statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[31c]"></a>str_checkname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lparser.o(i.str_checkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>

<P><STRONG><a name="[3d1]"></a>subexpr</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, lparser.o(i.subexpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 2568 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getunopr
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbinopr
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterlevel
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>

<P><STRONG><a name="[29d]"></a>suffixedexp</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, lparser.o(i.suffixedexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480 + Unknown Stack Size
<LI>Call Chain = suffixedexp &rArr; funcargs &rArr; constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[45b]"></a>test_then_block</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, lparser.o(i.test_then_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 2648 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = test_then_block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipnoopstat
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
</UL>

<P><STRONG><a name="[29c]"></a>testnext</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lparser.o(i.testnext))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = testnext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[47d]"></a>undefgoto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lparser.o(i.undefgoto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = undefgoto &rArr; semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[594]"></a>whilestat</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, lparser.o(i.whilestat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2664 + Unknown Stack Size
<LI>Call Chain = whilestat &rArr; cond &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[57f]"></a>yindex</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lparser.o(i.yindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = yindex &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[31f]"></a>checkoption</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, loslib.o(i.checkoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048 + Unknown Stack Size
<LI>Call Chain = checkoption &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[443]"></a>getboolfield</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loslib.o(i.getboolfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = getboolfield &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
</UL>

<P><STRONG><a name="[448]"></a>getfield</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, loslib.o(i.getfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = getfield &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
</UL>

<P><STRONG><a name="[46c]"></a>l_checktime</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, loslib.o(i.l_checktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = l_checktime &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_difftime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[c9]"></a>os_clock</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, loslib.o(i.os_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_clock &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>os_date</STRONG> (Thumb, 276 bytes, Stack size 4192 bytes, loslib.o(i.os_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 6328 + Unknown Stack Size
<LI>Call Chain = os_date &rArr; l_checktime &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setallfields
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checktime
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkoption
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>os_difftime</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, loslib.o(i.os_difftime))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160 + Unknown Stack Size
<LI>Call Chain = os_difftime &rArr; l_checktime &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checktime
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;difftime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>os_execute</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, loslib.o(i.os_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = os_execute &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>os_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, loslib.o(i.os_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = os_exit &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>os_getenv</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, loslib.o(i.os_getenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = os_getenv &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>os_remove</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, loslib.o(i.os_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = os_remove &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>os_rename</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, loslib.o(i.os_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = os_rename &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>os_setlocale</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, loslib.o(i.os_setlocale))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = os_setlocale &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>os_time</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, loslib.o(i.os_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
<LI>Call Chain = os_time &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setallfields
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfield
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getboolfield
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>os_tmpname</STRONG> (Thumb, 48 bytes, Stack size 272 bytes, loslib.o(i.os_tmpname))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = os_tmpname &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmpnam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loslib.o(.constdata)
</UL>
<P><STRONG><a name="[53d]"></a>setallfields</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, loslib.o(i.setallfields))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = setallfields &rArr; setfield &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setfield
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setboolfield
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_date
</UL>

<P><STRONG><a name="[58b]"></a>setboolfield</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, loslib.o(i.setboolfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = setboolfield &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setallfields
</UL>

<P><STRONG><a name="[58a]"></a>setfield</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, loslib.o(i.setfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = setfield &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setallfields
</UL>

<P><STRONG><a name="[45e]"></a>intarith</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, lobject.o(i.intarith))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = intarith &rArr; luaV_mod &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[475]"></a>isneg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lobject.o(i.isneg))
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
</UL>

<P><STRONG><a name="[470]"></a>l_str2d</STRONG> (Thumb, 140 bytes, Stack size 232 bytes, lobject.o(i.l_str2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2dloc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[472]"></a>l_str2dloc</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lobject.o(i.l_str2dloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
</UL>

<P><STRONG><a name="[474]"></a>l_str2int</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, lobject.o(i.l_str2int))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l_str2int
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isneg
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[4f8]"></a>numarith</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, lobject.o(i.numarith))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = numarith &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[4fa]"></a>pushstr</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lobject.o(i.pushstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + In Cycle
<LI>Call Chain = pushstr &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>

<P><STRONG><a name="[28c]"></a>addtoclib</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, loadlib.o(i.addtoclib))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = addtoclib &rArr; luaL_len &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlightuserdata
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[310]"></a>checkclib</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, loadlib.o(i.checkclib))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = checkclib &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[318]"></a>checkload</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, loadlib.o(i.checkload))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = checkload &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
</UL>

<P><STRONG><a name="[368]"></a>createclibstable</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, loadlib.o(i.createclibstable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = createclibstable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[370]"></a>createsearcherstable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, loadlib.o(i.createsearcherstable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = createsearcherstable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[408]"></a>findfile</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, loadlib.o(i.findfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 10392 + Unknown Stack Size
<LI>Call Chain = findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
</UL>

<P><STRONG><a name="[40f]"></a>findloader</STRONG> (Thumb, 190 bytes, Stack size 4184 bytes, loadlib.o(i.findloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 6168 + Unknown Stack Size
<LI>Call Chain = findloader &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
</UL>

<P><STRONG><a name="[86]"></a>gctm</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, loadlib.o(i.gctm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = gctm &rArr; luaL_len &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_unloadlib
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(i.createclibstable)
</UL>
<P><STRONG><a name="[d4]"></a>ll_loadlib</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, loadlib.o(i.ll_loadlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = ll_loadlib &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>ll_require</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, loadlib.o(i.ll_require))
<BR><BR>[Stack]<UL><LI>Max Depth = 6184 + Unknown Stack Size
<LI>Call Chain = ll_require &rArr; findloader &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>ll_searchpath</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, loadlib.o(i.ll_searchpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 10392 + Unknown Stack Size
<LI>Call Chain = ll_searchpath &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[48b]"></a>loadfunc</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, loadlib.o(i.loadfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 6200 + Unknown Stack Size
<LI>Call Chain = loadfunc &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
</UL>

<P><STRONG><a name="[482]"></a>lookforfunc</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, loadlib.o(i.lookforfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
<LI>Call Chain = lookforfunc &rArr; addtoclib &rArr; luaL_len &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_sym
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsys_load
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclib
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addtoclib
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
</UL>

<P><STRONG><a name="[492]"></a>lsys_load</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, loadlib.o(i.lsys_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lsys_load &rArr; lua_pushstring &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[493]"></a>lsys_sym</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, loadlib.o(i.lsys_sym))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lsys_sym &rArr; lua_pushstring &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[440]"></a>lsys_unloadlib</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loadlib.o(i.lsys_unloadlib))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
</UL>

<P><STRONG><a name="[53a]"></a>noenv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, loadlib.o(i.noenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = noenv &rArr; lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
</UL>

<P><STRONG><a name="[572]"></a>pushnexttemplate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, loadlib.o(i.pushnexttemplate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848 + Unknown Stack Size
<LI>Call Chain = pushnexttemplate &rArr; lua_pushlstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>

<P><STRONG><a name="[57d]"></a>readable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, loadlib.o(i.readable))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = readable &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>

<P><STRONG><a name="[d9]"></a>searcher_C</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, loadlib.o(i.searcher_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 10416 + Unknown Stack Size
<LI>Call Chain = searcher_C &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>searcher_Croot</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, loadlib.o(i.searcher_Croot))
<BR><BR>[Stack]<UL><LI>Max Depth = 10424 + Unknown Stack Size
<LI>Call Chain = searcher_Croot &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>searcher_Lua</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, loadlib.o(i.searcher_Lua))
<BR><BR>[Stack]<UL><LI>Max Depth = 10416 + Unknown Stack Size
<LI>Call Chain = searcher_Lua &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>searcher_preload</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, loadlib.o(i.searcher_preload))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = searcher_preload &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[409]"></a>searchpath</STRONG> (Thumb, 180 bytes, Stack size 4192 bytes, loadlib.o(i.searchpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 10360 + Unknown Stack Size
<LI>Call Chain = searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readable
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnexttemplate
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
</UL>

<P><STRONG><a name="[51f]"></a>setpath</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, loadlib.o(i.setpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 6200 + Unknown Stack Size
<LI>Call Chain = setpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noenv
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[db]"></a>math_abs</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lmathlib.o(i.math_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = math_abs &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>math_acos</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = math_acos &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>math_asin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = math_asin &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>math_atan</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lmathlib.o(i.math_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = math_atan &rArr; luaL_optnumber &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>math_ceil</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lmathlib.o(i.math_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = math_ceil &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>math_cos</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = math_cos &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>math_deg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lmathlib.o(i.math_deg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = math_deg &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>math_exp</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = math_exp &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>math_floor</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lmathlib.o(i.math_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = math_floor &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>math_fmod</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lmathlib.o(i.math_fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128 + Unknown Stack Size
<LI>Call Chain = math_fmod &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>math_log</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, lmathlib.o(i.math_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
<LI>Call Chain = math_log &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>math_max</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lmathlib.o(i.math_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = math_max &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>math_min</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lmathlib.o(i.math_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = math_min &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>math_modf</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lmathlib.o(i.math_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128 + Unknown Stack Size
<LI>Call Chain = math_modf &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>math_rad</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lmathlib.o(i.math_rad))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = math_rad &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>math_random</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lmathlib.o(i.math_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160 + Unknown Stack Size
<LI>Call Chain = math_random &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>math_randomseed</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lmathlib.o(i.math_randomseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = math_randomseed &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>math_sin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = math_sin &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>math_sqrt</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = math_sqrt &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>math_tan</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lmathlib.o(i.math_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = math_tan &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>math_toint</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lmathlib.o(i.math_toint))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = math_toint &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>math_type</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lmathlib.o(i.math_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = math_type &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>math_ult</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lmathlib.o(i.math_ult))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = math_ult &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[52e]"></a>pushnumint</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lmathlib.o(i.pushnumint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pushnumint &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
</UL>

<P><STRONG><a name="[30c]"></a>check_next1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, llex.o(i.check_next1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_next1 &rArr; luaZ_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[30e]"></a>check_next2</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, llex.o(i.check_next2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = check_next2 &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
</UL>

<P><STRONG><a name="[3c9]"></a>esccheck</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, llex.o(i.esccheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
</UL>

<P><STRONG><a name="[44a]"></a>gethexa</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, llex.o(i.gethexa))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
<LI>Call Chain = gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readhexaesc
</UL>

<P><STRONG><a name="[45c]"></a>inclinenumber</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, llex.o(i.inclinenumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = inclinenumber &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[3ca]"></a>lexerror</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, llex.o(i.lexerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>

<P><STRONG><a name="[483]"></a>llex</STRONG> (Thumb, 1128 bytes, Stack size 16 bytes, llex.o(i.llex))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next1
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
</UL>

<P><STRONG><a name="[485]"></a>read_long_string</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, llex.o(i.read_long_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = read_long_string &rArr; skip_sep &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[487]"></a>read_numeral</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, llex.o(i.read_numeral))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = read_numeral &rArr; check_next2 &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[486]"></a>read_string</STRONG> (Thumb, 618 bytes, Stack size 24 bytes, llex.o(i.read_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000 + Unknown Stack Size
<LI>Call Chain = read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readhexaesc
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[57c]"></a>readdecesc</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, llex.o(i.readdecesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944 + Unknown Stack Size
<LI>Call Chain = readdecesc &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[57a]"></a>readhexaesc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, llex.o(i.readhexaesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952 + Unknown Stack Size
<LI>Call Chain = readhexaesc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[57e]"></a>readutf8esc</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, llex.o(i.readutf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952 + Unknown Stack Size
<LI>Call Chain = readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
</UL>

<P><STRONG><a name="[30f]"></a>save</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, llex.o(i.save))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
</UL>

<P><STRONG><a name="[484]"></a>skip_sep</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, llex.o(i.skip_sep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = skip_sep &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[481]"></a>txtToken</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, llex.o(i.txtToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = txtToken &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>

<P><STRONG><a name="[57b]"></a>utf8esc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, llex.o(i.utf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_utf8esc
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[2b2]"></a>aux_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, liolib.o(i.aux_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + Unknown Stack Size
<LI>Call Chain = aux_close &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gc
</UL>

<P><STRONG><a name="[2b4]"></a>aux_lines</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, liolib.o(i.aux_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = aux_lines &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
</UL>

<P><STRONG><a name="[36c]"></a>createmeta</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, liolib.o(i.createmeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = createmeta &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
</UL>

<P><STRONG><a name="[371]"></a>createstdfile</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, liolib.o(i.createstdfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864 + Unknown Stack Size
<LI>Call Chain = createstdfile &rArr; newprefile &rArr; lua_newuserdata &rArr; luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
</UL>

<P><STRONG><a name="[fd]"></a>f_flush</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, liolib.o(i.f_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104 + Unknown Stack Size
<LI>Call Chain = f_flush &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>f_gc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, liolib.o(i.f_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104 + Unknown Stack Size
<LI>Call Chain = f_gc &rArr; aux_close &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>f_lines</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, liolib.o(i.f_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = f_lines &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>f_read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, liolib.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 6176 + Unknown Stack Size
<LI>Call Chain = f_read &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>f_seek</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, liolib.o(i.f_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192 + Unknown Stack Size
<LI>Call Chain = f_seek &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>f_setvbuf</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, liolib.o(i.f_setvbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = f_setvbuf &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>f_tostring</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, liolib.o(i.f_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + Unknown Stack Size
<LI>Call Chain = f_tostring &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>f_write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, liolib.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = f_write &rArr; g_write &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[438]"></a>g_iofile</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, liolib.o(i.g_iofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = g_iofile &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
</UL>

<P><STRONG><a name="[3f2]"></a>g_read</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, liolib.o(i.g_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 6160 + Unknown Stack Size
<LI>Call Chain = g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_eof
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chars
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[3f9]"></a>g_write</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, liolib.o(i.g_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = g_write &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[44c]"></a>getiofile</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, liolib.o(i.getiofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = getiofile &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
</UL>

<P><STRONG><a name="[f2]"></a>io_close</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, liolib.o(i.io_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = io_close &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>io_fclose</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, liolib.o(i.io_fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + Unknown Stack Size
<LI>Call Chain = io_fclose &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(i.newfile)
</UL>
<P><STRONG><a name="[f3]"></a>io_flush</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, liolib.o(i.io_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = io_flush &rArr; getiofile &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>io_input</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, liolib.o(i.io_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = io_input &rArr; g_iofile &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>io_lines</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, liolib.o(i.io_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = io_lines &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>io_noclose</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, liolib.o(i.io_noclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + Unknown Stack Size
<LI>Call Chain = io_noclose &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 2]<UL><LI> liolib.o(i.io_noclose)
<LI> liolib.o(i.createstdfile)
</UL>
<P><STRONG><a name="[f6]"></a>io_open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, liolib.o(i.io_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
<LI>Call Chain = io_open &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_checkmode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>io_output</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, liolib.o(i.io_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = io_output &rArr; g_iofile &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>io_pclose</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, liolib.o(i.io_pclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + Unknown Stack Size
<LI>Call Chain = io_pclose &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(i.io_popen)
</UL>
<P><STRONG><a name="[f8]"></a>io_popen</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, liolib.o(i.io_popen))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
<LI>Call Chain = io_popen &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>io_read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, liolib.o(i.io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 6176 + Unknown Stack Size
<LI>Call Chain = io_read &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>io_readline</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, liolib.o(i.io_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 6184 + Unknown Stack Size
<LI>Call Chain = io_readline &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(i.aux_lines)
</UL>
<P><STRONG><a name="[fa]"></a>io_tmpfile</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, liolib.o(i.io_tmpfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872 + Unknown Stack Size
<LI>Call Chain = io_tmpfile &rArr; newfile &rArr; newprefile &rArr; lua_newuserdata &rArr; luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmpfile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>io_type</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, liolib.o(i.io_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048 + Unknown Stack Size
<LI>Call Chain = io_type &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>io_write</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, liolib.o(i.io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = io_write &rArr; g_write &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[468]"></a>l_checkmode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, liolib.o(i.l_checkmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = l_checkmode &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
</UL>

<P><STRONG><a name="[467]"></a>newfile</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, liolib.o(i.newfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856 + Unknown Stack Size
<LI>Call Chain = newfile &rArr; newprefile &rArr; lua_newuserdata &rArr; luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tmpfile
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
</UL>

<P><STRONG><a name="[372]"></a>newprefile</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, liolib.o(i.newprefile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840 + Unknown Stack Size
<LI>Call Chain = newprefile &rArr; lua_newuserdata &rArr; luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
</UL>

<P><STRONG><a name="[539]"></a>nextc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, liolib.o(i.nextc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nextc &rArr; getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdigits
</UL>

<P><STRONG><a name="[439]"></a>opencheck</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, liolib.o(i.opencheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = opencheck &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
</UL>

<P><STRONG><a name="[43f]"></a>read_all</STRONG> (Thumb, 76 bytes, Stack size 4184 bytes, liolib.o(i.read_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 6120 + Unknown Stack Size
<LI>Call Chain = read_all &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[43d]"></a>read_chars</STRONG> (Thumb, 74 bytes, Stack size 4184 bytes, liolib.o(i.read_chars))
<BR><BR>[Stack]<UL><LI>Max Depth = 6120 + Unknown Stack Size
<LI>Call Chain = read_chars &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[43b]"></a>read_line</STRONG> (Thumb, 156 bytes, Stack size 4192 bytes, liolib.o(i.read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 6128 + Unknown Stack Size
<LI>Call Chain = read_line &rArr; luaL_prepbuffsize &rArr; newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[43e]"></a>read_number</STRONG> (Thumb, 208 bytes, Stack size 240 bytes, liolib.o(i.read_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = read_number &rArr; lua_stringtonumber &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdigits
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ungetc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[578]"></a>readdigits</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, liolib.o(i.readdigits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readdigits &rArr; nextc &rArr; getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
</UL>

<P><STRONG><a name="[577]"></a>test2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, liolib.o(i.test2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = test2 &rArr; nextc &rArr; getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextc
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
</UL>

<P><STRONG><a name="[43c]"></a>test_eof</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, liolib.o(i.test_eof))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = test_eof &rArr; lua_pushstring &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ungetc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[3d6]"></a>tofile</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, liolib.o(i.tofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + Unknown Stack Size
<LI>Call Chain = tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_flush
</UL>

<P><STRONG><a name="[222]"></a>GCTM</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, lgc.o(i.GCTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + In Cycle
<LI>Call Chain = GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udata2finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callallpendingfinalizers
</UL>

<P><STRONG><a name="[2a7]"></a>atomic</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, lgc.o(i.atomic))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_clearcache
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remarkupvals
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearvalues
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeys
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[2f6]"></a>callallpendingfinalizers</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lgc.o(i.callallpendingfinalizers))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = callallpendingfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
</UL>

<P><STRONG><a name="[303]"></a>checkSizes</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lgc.o(i.checkSizes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = checkSizes &rArr; luaS_resize &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[2b0]"></a>clearkeys</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lgc.o(i.clearkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clearkeys &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[2ad]"></a>clearvalues</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, lgc.o(i.clearvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clearvalues &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[2ac]"></a>convergeephemerons</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lgc.o(i.convergeephemerons))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[83]"></a>dothecall</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lgc.o(i.dothecall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = dothecall &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lgc.o(i.GCTM)
</UL>
<P><STRONG><a name="[3c5]"></a>entersweep</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lgc.o(i.entersweep))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = entersweep &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[589]"></a>findlast</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lgc.o(i.findlast))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
</UL>

<P><STRONG><a name="[428]"></a>freeLclosure</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lgc.o(i.freeLclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = freeLclosure &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvdeccount
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[42b]"></a>freeobj</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, lgc.o(i.freeobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_remove
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeLclosure
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>

<P><STRONG><a name="[4a9]"></a>getdebt</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lgc.o(i.getdebt))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>

<P><STRONG><a name="[329]"></a>iscleared</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lgc.o(i.iscleared))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearvalues
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeys
</UL>

<P><STRONG><a name="[2af]"></a>markbeingfnz</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lgc.o(i.markbeingfnz))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = markbeingfnz &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[2a9]"></a>markmt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lgc.o(i.markmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = markmt &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[2ab]"></a>propagateall</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lgc.o(i.propagateall))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[543]"></a>propagatemark</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lgc.o(i.propagatemark))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseLclosure
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCclosure
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
</UL>

<P><STRONG><a name="[2a8]"></a>reallymarkobject</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lgc.o(i.reallymarkobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseLclosure
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCclosure
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remarkupvals
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[2aa]"></a>remarkupvals</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lgc.o(i.remarkupvals))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = remarkupvals &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[32a]"></a>removeentry</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lgc.o(i.removeentry))
<BR><BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearvalues
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeys
</UL>

<P><STRONG><a name="[585]"></a>restartcollection</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lgc.o(i.restartcollection))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = restartcollection &rArr; markmt &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[4ab]"></a>runafewfinalizers</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lgc.o(i.runafewfinalizers))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[2ae]"></a>separatetobefnz</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lgc.o(i.separatetobefnz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = separatetobefnz
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlast
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[4a7]"></a>setpause</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lgc.o(i.setpause))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setpause &rArr; luaE_setdebt
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[4a8]"></a>singlestep</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, lgc.o(i.singlestep))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepstep
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSizes
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
</UL>

<P><STRONG><a name="[3c6]"></a>sweeplist</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, lgc.o(i.sweeplist))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeptolive
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepstep
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
</UL>

<P><STRONG><a name="[58d]"></a>sweepstep</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lgc.o(i.sweepstep))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sweepstep &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[4a4]"></a>sweeptolive</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lgc.o(i.sweeptolive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sweeptolive &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
</UL>

<P><STRONG><a name="[546]"></a>traverseCclosure</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lgc.o(i.traverseCclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = traverseCclosure &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[545]"></a>traverseLclosure</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lgc.o(i.traverseLclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = traverseLclosure &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[35a]"></a>traverseephemeron</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, lgc.o(i.traverseephemeron))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
</UL>

<P><STRONG><a name="[548]"></a>traverseproto</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, lgc.o(i.traverseproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = traverseproto &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[5a6]"></a>traversestrongtable</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lgc.o(i.traversestrongtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = traversestrongtable &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[544]"></a>traversetable</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, lgc.o(i.traversetable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[547]"></a>traversethread</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lgc.o(i.traversethread))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = traversethread &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[5a7]"></a>traverseweakvalue</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lgc.o(i.traverseweakvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = traverseweakvalue &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[223]"></a>udata2finalize</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lgc.o(i.udata2finalize))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[216]"></a>DumpBlock</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ldump.o(i.DumpBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpNumber
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInteger
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpCode
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>

<P><STRONG><a name="[215]"></a>DumpByte</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ldump.o(i.DumpByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpUpvalues
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[217]"></a>DumpCode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ldump.o(i.DumpCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DumpCode &rArr; DumpInt &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[219]"></a>DumpConstants</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ldump.o(i.DumpConstants))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DumpConstants &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpNumber
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInteger
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[21d]"></a>DumpDebug</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ldump.o(i.DumpDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DumpDebug &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[21e]"></a>DumpFunction</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ldump.o(i.DumpFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DumpFunction &rArr; DumpConstants &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpUpvalues
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpCode
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
</UL>

<P><STRONG><a name="[221]"></a>DumpHeader</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ldump.o(i.DumpHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DumpHeader &rArr; DumpNumber &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpNumber
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInteger
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>

<P><STRONG><a name="[218]"></a>DumpInt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ldump.o(i.DumpInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DumpInt &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpUpvalues
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpCode
</UL>

<P><STRONG><a name="[21b]"></a>DumpInteger</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ldump.o(i.DumpInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DumpInteger &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[21a]"></a>DumpNumber</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ldump.o(i.DumpNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DumpNumber &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[220]"></a>DumpProtos</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ldump.o(i.DumpProtos))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = DumpProtos &rArr;  DumpFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[21c]"></a>DumpString</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ldump.o(i.DumpString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[21f]"></a>DumpUpvalues</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ldump.o(i.DumpUpvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DumpUpvalues &rArr; DumpInt &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[4b8]"></a>adjust_varargs</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ldo.o(i.adjust_varargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adjust_varargs
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[2f7]"></a>callhook</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ldo.o(i.callhook))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = callhook &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[319]"></a>checkmode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ldo.o(i.checkmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872 + Unknown Stack Size
<LI>Call Chain = checkmode &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[4bc]"></a>correctstack</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, ldo.o(i.correctstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = correctstack
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>

<P><STRONG><a name="[97]"></a>f_parser</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ldo.o(i.f_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2976 + Unknown Stack Size
<LI>Call Chain = f_parser &rArr; luaY_parser &rArr; mainfunc &rArr; statlist &rArr; statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.luaD_protectedparser)
</UL>
<P><STRONG><a name="[580]"></a>findpcall</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ldo.o(i.findpcall))
<BR><BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
</UL>

<P><STRONG><a name="[418]"></a>finishCcall</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ldo.o(i.finishCcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = finishCcall &rArr; luaD_poscall &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>

<P><STRONG><a name="[4b6]"></a>moveresults</STRONG> (Thumb, 210 bytes, Stack size 28 bytes, ldo.o(i.moveresults))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = moveresults
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>

<P><STRONG><a name="[51c]"></a>recover</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ldo.o(i.recover))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
<LI>Call Chain = recover &rArr; luaF_close &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findpcall
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
</UL>

<P><STRONG><a name="[9f]"></a>resume</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ldo.o(i.resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = resume &rArr; unroll &rArr; luaV_finishOp &rArr; luaV_concat &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.lua_resume)
</UL>
<P><STRONG><a name="[51b]"></a>resume_error</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ldo.o(i.resume_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = resume_error &rArr; luaS_new &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
</UL>

<P><STRONG><a name="[4b4]"></a>seterrorobj</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ldo.o(i.seterrorobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = seterrorobj &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>

<P><STRONG><a name="[4ae]"></a>stackerror</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ldo.o(i.stackerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = stackerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>

<P><STRONG><a name="[4bd]"></a>stackinuse</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ldo.o(i.stackinuse))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[4b9]"></a>tryfuncTM</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ldo.o(i.tryfuncTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tryfuncTM &rArr; luaG_typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[a0]"></a>unroll</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ldo.o(i.unroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = unroll &rArr; luaV_finishOp &rArr; luaV_concat &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishOp
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishCcall
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.lua_resume)
</UL>
<P><STRONG><a name="[2b9]"></a>auxgetinfo</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, ldebug.o(i.auxgetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = auxgetinfo &rArr; getfuncname &rArr; funcnamefromcode &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfuncname
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcinfo
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[34b]"></a>collectvalidlines</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, ldebug.o(i.collectvalidlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[2bb]"></a>currentline</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ldebug.o(i.currentline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = currentline
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[375]"></a>currentpc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ldebug.o(i.currentpc))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>

<P><STRONG><a name="[417]"></a>filterpc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ldebug.o(i.filterpc))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findsetreg
</UL>

<P><STRONG><a name="[413]"></a>findlocal</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ldebug.o(i.findlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = findlocal &rArr; findvararg
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findvararg
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
</UL>

<P><STRONG><a name="[416]"></a>findsetreg</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, ldebug.o(i.findsetreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = findsetreg
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterpc
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[414]"></a>findvararg</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ldebug.o(i.findvararg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = findvararg
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
</UL>

<P><STRONG><a name="[2ba]"></a>funcinfo</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ldebug.o(i.funcinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = funcinfo &rArr; luaO_chunkid &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[435]"></a>funcnamefromcode</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, ldebug.o(i.funcnamefromcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = funcnamefromcode &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfuncname
</UL>

<P><STRONG><a name="[2bc]"></a>getfuncname</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ldebug.o(i.getfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getfuncname &rArr; funcnamefromcode &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[436]"></a>getobjname</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, ldebug.o(i.getobjname))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upvalname
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kname
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findsetreg
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kname
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
</UL>

<P><STRONG><a name="[452]"></a>getupvalname</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ldebug.o(i.getupvalname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getupvalname
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upvalname
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>

<P><STRONG><a name="[5b7]"></a>isinstack</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ldebug.o(i.isinstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isinstack
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>

<P><STRONG><a name="[451]"></a>kname</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ldebug.o(i.kname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = kname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[516]"></a>swapextra</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ldebug.o(i.swapextra))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swapextra
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[450]"></a>upvalname</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ldebug.o(i.upvalname))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalname
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[4cb]"></a>varinfo</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ldebug.o(i.varinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = varinfo &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isinstack
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalname
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
</UL>

<P><STRONG><a name="[2d0]"></a>auxupvalue</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ldblib.o(i.auxupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = auxupvalue &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getupvalue
</UL>

<P><STRONG><a name="[324]"></a>checkstack</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ldblib.o(i.checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[327]"></a>checkupval</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ldblib.o(i.checkupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = checkupval &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[10f]"></a>db_debug</STRONG> (Thumb, 136 bytes, Stack size 272 bytes, ldblib.o(i.db_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344 + Unknown Stack Size
<LI>Call Chain = db_debug &rArr; luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>db_gethook</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ldblib.o(i.db_gethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = db_gethook &rArr; checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethookmask
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethookcount
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethook
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unmakemask
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>db_getinfo</STRONG> (Thumb, 384 bytes, Stack size 128 bytes, ldblib.o(i.db_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + Unknown Stack Size
<LI>Call Chain = db_getinfo &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabss
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsi
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsb
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>db_getlocal</STRONG> (Thumb, 186 bytes, Stack size 128 bytes, ldblib.o(i.db_getlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240 + Unknown Stack Size
<LI>Call Chain = db_getlocal &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>db_getmetatable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ldblib.o(i.db_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = db_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>db_getregistry</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ldblib.o(i.db_getregistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = db_getregistry &rArr; lua_pushvalue &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>db_getupvalue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ldblib.o(i.db_getupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
<LI>Call Chain = db_getupvalue &rArr; auxupvalue &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>db_getuservalue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ldblib.o(i.db_getuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = db_getuservalue &rArr; lua_type &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getuservalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>db_sethook</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ldblib.o(i.db_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + Unknown Stack Size
<LI>Call Chain = db_sethook &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_sethook
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makemask
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>db_setlocal</STRONG> (Thumb, 148 bytes, Stack size 128 bytes, ldblib.o(i.db_setlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240 + Unknown Stack Size
<LI>Call Chain = db_setlocal &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>db_setmetatable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ldblib.o(i.db_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = db_setmetatable &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>db_setupvalue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldblib.o(i.db_setupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
<LI>Call Chain = db_setupvalue &rArr; auxupvalue &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>db_setuservalue</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ldblib.o(i.db_setuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = db_setuservalue &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setuservalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>db_traceback</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ldblib.o(i.db_traceback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + Unknown Stack Size
<LI>Call Chain = db_traceback &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>db_upvalueid</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ldblib.o(i.db_upvalueid))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = db_upvalueid &rArr; checkupval &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlightuserdata
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>db_upvaluejoin</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ldblib.o(i.db_upvaluejoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160 + Unknown Stack Size
<LI>Call Chain = db_upvaluejoin &rArr; checkupval &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[378]"></a>getthread</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ldblib.o(i.getthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = getthread &rArr; lua_type &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[88]"></a>hookf</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ldblib.o(i.hookf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = hookf &rArr; lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ldblib.o(i.db_sethook)
<LI> ldblib.o(i.db_gethook)
</UL>
<P><STRONG><a name="[388]"></a>makemask</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ldblib.o(i.makemask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = makemask
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[383]"></a>settabsb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ldblib.o(i.settabsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = settabsb &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[382]"></a>settabsi</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ldblib.o(i.settabsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = settabsi &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[381]"></a>settabss</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ldblib.o(i.settabss))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = settabss &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[384]"></a>treatstackoption</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ldblib.o(i.treatstackoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = treatstackoption &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[37c]"></a>unmakemask</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ldblib.o(i.unmakemask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = unmakemask
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[2c1]"></a>auxresume</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lcorolib.o(i.auxresume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992 + Unknown Stack Size
<LI>Call Chain = auxresume &rArr; lua_resume &rArr; recover &rArr; luaF_close &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_status
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[444]"></a>getco</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcorolib.o(i.getco))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = getco &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
</UL>

<P><STRONG><a name="[91]"></a>luaB_auxwrap</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lcorolib.o(i.luaB_auxwrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = luaB_auxwrap &rArr; auxresume &rArr; lua_resume &rArr; recover &rArr; luaF_close &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(i.luaB_cowrap)
</UL>
<P><STRONG><a name="[11f]"></a>luaB_cocreate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_cocreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104 + Unknown Stack Size
<LI>Call Chain = luaB_cocreate &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>luaB_coresume</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcorolib.o(i.luaB_coresume))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = luaB_coresume &rArr; getco &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>luaB_corunning</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_corunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaB_corunning
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>luaB_costatus</STRONG> (Thumb, 120 bytes, Stack size 112 bytes, lcorolib.o(i.luaB_costatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
<LI>Call Chain = luaB_costatus &rArr; getco &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_status
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>luaB_cowrap</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcorolib.o(i.luaB_cowrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = luaB_cowrap &rArr; luaB_cocreate &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>luaB_yield</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = luaB_yield &rArr; lua_yieldk &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>luaB_yieldable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_yieldable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaB_yieldable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isyieldable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[27b]"></a>addk</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, lcode.o(i.addk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976 + Unknown Stack Size
<LI>Call Chain = addk &rArr; luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nilK
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolK
</UL>

<P><STRONG><a name="[2e2]"></a>boolK</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, lcode.o(i.boolK))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = boolK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>

<P><STRONG><a name="[335]"></a>code_loadbool</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lcode.o(i.code_loadbool))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = code_loadbool &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[337]"></a>codebinexpval</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, lcode.o(i.codebinexpval))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232 + Unknown Stack Size
<LI>Call Chain = codebinexpval &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[33c]"></a>codecomp</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, lcode.o(i.codecomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232 + Unknown Stack Size
<LI>Call Chain = codecomp &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[33e]"></a>codeextraarg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcode.o(i.codeextraarg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = codeextraarg &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
</UL>

<P><STRONG><a name="[340]"></a>codenot</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lcode.o(i.codenot))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = codenot &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
</UL>

<P><STRONG><a name="[349]"></a>codeunexpval</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lcode.o(i.codeunexpval))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184 + Unknown Stack Size
<LI>Call Chain = codeunexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
</UL>

<P><STRONG><a name="[33d]"></a>condjump</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lcode.o(i.condjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064 + Unknown Stack Size
<LI>Call Chain = condjump &rArr; luaK_jump &rArr; luaK_codeABx &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
</UL>

<P><STRONG><a name="[352]"></a>constfolding</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, lcode.o(i.constfolding))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = constfolding &rArr; luaO_arith &rArr; luaT_trybinTM &rArr; luaT_callbinTM &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[343]"></a>discharge2anyreg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcode.o(i.discharge2anyreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = discharge2anyreg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[39c]"></a>discharge2reg</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lcode.o(i.discharge2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080 + Unknown Stack Size
<LI>Call Chain = discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
</UL>

<P><STRONG><a name="[3a0]"></a>dischargejpc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcode.o(i.dischargejpc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>

<P><STRONG><a name="[3cd]"></a>exp2reg</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, lcode.o(i.exp2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = exp2reg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
</UL>

<P><STRONG><a name="[41a]"></a>fixjump</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcode.o(i.fixjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>

<P><STRONG><a name="[344]"></a>freeexp</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lcode.o(i.freeexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = freeexp
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[339]"></a>freeexps</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcode.o(i.freeexps))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = freeexps
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>

<P><STRONG><a name="[42a]"></a>freereg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lcode.o(i.freereg))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>

<P><STRONG><a name="[4d9]"></a>getjump</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcode.o(i.getjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
</UL>

<P><STRONG><a name="[537]"></a>getjumpcontrol</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcode.o(i.getjumpcontrol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
</UL>

<P><STRONG><a name="[46b]"></a>jumponcond</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lcode.o(i.jumponcond))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
</UL>

<P><STRONG><a name="[33f]"></a>luaK_code</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lcode.o(i.luaK_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992 + Unknown Stack Size
<LI>Call Chain = luaK_code &rArr; dischargejpc &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dischargejpc
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
</UL>

<P><STRONG><a name="[39e]"></a>luaK_numberK</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, lcode.o(i.luaK_numberK))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[3cf]"></a>need_value</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcode.o(i.need_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = need_value &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[342]"></a>negatecondition</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcode.o(i.negatecondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = negatecondition &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[4db]"></a>nilK</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, lcode.o(i.nilK))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = nilK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>

<P><STRONG><a name="[3a1]"></a>patchlistaux</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lcode.o(i.patchlistaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952 + Unknown Stack Size
<LI>Call Chain = patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dischargejpc
</UL>

<P><STRONG><a name="[541]"></a>patchtestreg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lcode.o(i.patchtestreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = patchtestreg &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>

<P><STRONG><a name="[345]"></a>removevalues</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcode.o(i.removevalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = removevalues &rArr; patchtestreg &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[353]"></a>tonumeral</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lcode.o(i.tonumeral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tonumeral
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>

<P><STRONG><a name="[354]"></a>validop</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lcode.o(i.validop))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = validop &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>

<P><STRONG><a name="[2d5]"></a>b_str2int</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, lbaselib.o(i.b_str2int))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = b_str2int &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
</UL>

<P><STRONG><a name="[92]"></a>dofilecont</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lbaselib.o(i.dofilecont))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dofilecont
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_dofile)
</UL>
<P><STRONG><a name="[96]"></a>finishpcall</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lbaselib.o(i.finishpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = finishpcall &rArr; lua_pushvalue &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(i.luaB_pcall)
<LI> lbaselib.o(i.luaB_xpcall)
</UL>
<P><STRONG><a name="[94]"></a>generic_reader</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lbaselib.o(i.generic_reader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = generic_reader &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_load)
</UL>
<P><STRONG><a name="[93]"></a>ipairsaux</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lbaselib.o(i.ipairsaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128 + Unknown Stack Size
<LI>Call Chain = ipairsaux &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_ipairs)
</UL>
<P><STRONG><a name="[48a]"></a>load_aux</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lbaselib.o(i.load_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = load_aux &rArr; lua_setupvalue &rArr; luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[126]"></a>luaB_assert</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160 + Unknown Stack Size
<LI>Call Chain = luaB_assert &rArr; luaB_error &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>luaB_collectgarbage</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, lbaselib.o(i.luaB_collectgarbage))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208 + Unknown Stack Size
<LI>Call Chain = luaB_collectgarbage &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>luaB_dofile</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_dofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2608 + Unknown Stack Size
<LI>Call Chain = luaB_dofile &rArr; luaL_loadfilex &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dofilecont
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>luaB_error</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = luaB_error &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>luaB_getmetatable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = luaB_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>luaB_ipairs</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_ipairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = luaB_ipairs &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>luaB_load</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, lbaselib.o(i.luaB_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160 + Unknown Stack Size
<LI>Call Chain = luaB_load &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>luaB_loadfile</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_loadfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2616 + Unknown Stack Size
<LI>Call Chain = luaB_loadfile &rArr; luaL_loadfilex &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>luaB_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = luaB_next &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(i.luaB_pairs)
<LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>luaB_pairs</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_pairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064 + Unknown Stack Size
<LI>Call Chain = luaB_pairs &rArr; pairsmeta &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>luaB_pcall</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = luaB_pcall &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>luaB_print</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, lbaselib.o(i.luaB_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = luaB_print &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>luaB_rawequal</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048 + Unknown Stack Size
<LI>Call Chain = luaB_rawequal &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>luaB_rawget</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = luaB_rawget &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>luaB_rawlen</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_rawlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = luaB_rawlen &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>luaB_rawset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = luaB_rawset &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>luaB_select</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = luaB_select &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>luaB_setmetatable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104 + Unknown Stack Size
<LI>Call Chain = luaB_setmetatable &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>luaB_tonumber</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lbaselib.o(i.luaB_tonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144 + Unknown Stack Size
<LI>Call Chain = luaB_tonumber &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>luaB_tostring</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = luaB_tostring &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>luaB_type</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = luaB_type &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>luaB_xpcall</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_xpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112 + Unknown Stack Size
<LI>Call Chain = luaB_xpcall &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[49c]"></a>pairsmeta</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lbaselib.o(i.pairsmeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056 + Unknown Stack Size
<LI>Call Chain = pairsmeta &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
</UL>

<P><STRONG><a name="[a5]"></a>boxgc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lauxlib.o(i.boxgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = boxgc &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.newbox)
</UL>
<P><STRONG><a name="[3c7]"></a>errfile</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lauxlib.o(i.errfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = errfile &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[404]"></a>findfield</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lauxlib.o(i.findfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[99]"></a>getF</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lauxlib.o(i.getF))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getF &rArr; fread &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_loadfilex)
</UL>
<P><STRONG><a name="[98]"></a>getS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lauxlib.o(i.getS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_loadbufferx)
</UL>
<P><STRONG><a name="[464]"></a>interror</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lauxlib.o(i.interror))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + Unknown Stack Size
<LI>Call Chain = interror &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[9a]"></a>l_alloc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lauxlib.o(i.l_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = l_alloc &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_newstate)
</UL>
<P><STRONG><a name="[47a]"></a>lastlevel</STRONG> (Thumb, 70 bytes, Stack size 120 bytes, lauxlib.o(i.lastlevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lastlevel &rArr; lua_getstack
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
</UL>

<P><STRONG><a name="[4f2]"></a>newbox</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lauxlib.o(i.newbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = newbox &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>

<P><STRONG><a name="[9b]"></a>panic</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lauxlib.o(i.panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = panic &rArr; lua_tolstring &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_newstate)
</UL>
<P><STRONG><a name="[4f7]"></a>pushfuncname</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lauxlib.o(i.pushfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912 + Unknown Stack Size
<LI>Call Chain = pushfuncname &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
</UL>

<P><STRONG><a name="[4e1]"></a>pushglobalfuncname</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lauxlib.o(i.pushglobalfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
</UL>

<P><STRONG><a name="[2e3]"></a>resizebox</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lauxlib.o(i.resizebox))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getallocf
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boxgc
</UL>

<P><STRONG><a name="[591]"></a>skipBOM</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lauxlib.o(i.skipBOM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skipBOM &rArr; getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
</UL>

<P><STRONG><a name="[4ec]"></a>skipcomment</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lauxlib.o(i.skipcomment))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = skipcomment &rArr; skipBOM &rArr; getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipBOM
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[466]"></a>tag_error</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lauxlib.o(i.tag_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072 + Unknown Stack Size
<LI>Call Chain = tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
</UL>

<P><STRONG><a name="[4e6]"></a>typeerror</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lauxlib.o(i.typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048 + Unknown Stack Size
<LI>Call Chain = typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>

<P><STRONG><a name="[517]"></a>aux_upvalue</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lapi.o(i.aux_upvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aux_upvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
</UL>

<P><STRONG><a name="[2bd]"></a>auxgetstr</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lapi.o(i.auxgetstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = auxgetstr &rArr; luaV_finishget &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
</UL>

<P><STRONG><a name="[2c7]"></a>auxsetstr</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lapi.o(i.auxsetstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = auxsetstr &rArr; luaV_finishset &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
</UL>

<P><STRONG><a name="[9e]"></a>f_call</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lapi.o(i.f_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = f_call &rArr; luaD_callnoyield &rArr; luaD_call &rArr; luaV_execute &rArr;  luaT_trybinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lapi.o(i.lua_pcallk)
</UL>
<P><STRONG><a name="[453]"></a>getupvalref</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, lapi.o(i.getupvalref))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = getupvalref &rArr; index2addr
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
</UL>

<P><STRONG><a name="[9c]"></a>growstack</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lapi.o(i.growstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = growstack &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lapi.o(i.lua_checkstack)
</UL>
<P><STRONG><a name="[454]"></a>index2addr</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lapi.o(i.index2addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setuservalue
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getuservalue
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalref
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
</UL>

<P><STRONG><a name="[51d]"></a>reverse</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, lapi.o(i.reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
</UL>

<P><STRONG><a name="[307]"></a>check_fs</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[367]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[3f3]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[397]"></a>clst2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[360]"></a>create_chain</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[363]"></a>create_name</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[365]"></a>dbc_1st</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[366]"></a>dbc_2nd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.dbc_2nd))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[392]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[395]"></a>dir_clear</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[399]"></a>dir_find</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[394]"></a>dir_next</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[39a]"></a>dir_register</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[393]"></a>dir_sdi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[3e8]"></a>find_volume</STRONG> (Thumb, 762 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[3ea]"></a>follow_path</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[361]"></a>get_fat</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[3e1]"></a>get_ldnumber</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[3eb]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[3ee]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[309]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[30a]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[39b]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[364]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[308]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[362]"></a>put_fat</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[3ed]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[3ec]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[3e5]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[3e4]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[3f8]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[396]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[3d5]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[558]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[559]"></a>prvCopyDataToQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[55b]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[562]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[563]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[56e]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[549]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[54d]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[554]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[557]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[aa]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[55d]"></a>prvInitialiseNewTask</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[54f]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[5b3]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[551]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[56d]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[560]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[561]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[564]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[566]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[569]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[567]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[56c]"></a>prvSwitchTimerLists</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[ab]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[a7]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[575]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[576]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[5ac]"></a>chksum</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, uip.o(i.chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[5a8]"></a>uip_add_rcv_nxt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uip.o(i.uip_add_rcv_nxt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_add_rcv_nxt
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[5af]"></a>upper_layer_chksum</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uip.o(i.upper_layer_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
</UL>

<P><STRONG><a name="[5aa]"></a>uip_arp_update</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, uip_arp.o(i.uip_arp_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
</UL>

<P><STRONG><a name="[214]"></a>CheckITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CheckITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[244]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[245]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1cc]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[1cd]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_weekbasedyear
</UL>

<P><STRONG><a name="[1d1]"></a>_findweek</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[1ce]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[1d0]"></a>_weekbasedyear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _weekbasedyear &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[5d6]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[5c9]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1dd]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[7e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[1e8]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[1f1]"></a>_locale_name</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[1f2]"></a>_set_locale_byname</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
</UL>

<P><STRONG><a name="[1fb]"></a>_fp_value</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
